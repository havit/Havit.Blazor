<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Havit.Blazor.Components.Web</name>
    </assembly>
    <members>
        <member name="T:Havit.Blazor.Components.Web.CollectionRegistration`1">
            <summary>
            Allows child components to register with an owner component via this class shared as a cascading value &amp; parameter.
            </summary>
            <remarks>
            Constructor.
            </remarks>
            <param name="collection">Collection to add/remove components.</param>
            <param name="stateHasChangedAction">Action to call the StateHasChanged method. Due to a server prerendering issue in .NET 5, the StateHasChanged must be called inside InvokeAsync, so the action is awaitable.</param>
            <param name="isOwnerDisposedFunc">Function to return if the holding component is disposed.</param>
            <param name="itemAddedCallback">Callback to call when the component is added to the collection.</param>
            <param name="itemRemovedCallback">Callback to call when the component is removed from the collection.</param>
        </member>
        <member name="M:Havit.Blazor.Components.Web.CollectionRegistration`1.#ctor(System.Collections.Generic.ICollection{`0},System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean},System.Action{`0},System.Action{`0})">
            <summary>
            Allows child components to register with an owner component via this class shared as a cascading value &amp; parameter.
            </summary>
            <remarks>
            Constructor.
            </remarks>
            <param name="collection">Collection to add/remove components.</param>
            <param name="stateHasChangedAction">Action to call the StateHasChanged method. Due to a server prerendering issue in .NET 5, the StateHasChanged must be called inside InvokeAsync, so the action is awaitable.</param>
            <param name="isOwnerDisposedFunc">Function to return if the holding component is disposed.</param>
            <param name="itemAddedCallback">Callback to call when the component is added to the collection.</param>
            <param name="itemRemovedCallback">Callback to call when the component is removed from the collection.</param>
        </member>
        <member name="M:Havit.Blazor.Components.Web.CollectionRegistration`1.Register(`0)">
            <summary>
            Registers with the collection and calls the state has changed.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.CollectionRegistration`1.UnregisterAsync(`0)">
            <summary>
            Unregisters from the collection and calls the state has changed (when the owner is not disposed).
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.CssClassHelper">
            <summary>
            Helper for working with CSS classes.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.CssClassHelper.Combine(System.String[])">
            <summary>
            Join class names to one class attribute value (using space as a separator). <c>Null</c> or empty items in cssClasses argument are ignored.
            </summary>
            <example>
            For "btn btn-primary", <c>null</c>, "bt-lrg" returns "btn btn-primary bt-lrg".
            </example>
        </member>
        <member name="T:Havit.Blazor.Components.Web.Debouncer">
            <summary>
            Debouncer helps you to debounce asynchronous actions.
            You can use it in your callbacks to prevent multiple calls of the same action in a short period of time.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Debouncer.DebounceAsync(System.Int32,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Starts the debouncing.
            </summary>
            <param name="millisecondsDelay">The delay in milliseconds for debouncing.</param>
            <param name="actionAsync">The asynchronous action to be executed. The <see cref="T:System.Threading.CancellationToken"/> gets canceled if the method is called again.</param>
        </member>
        <member name="P:Havit.Blazor.Components.Web.MessageBoxRequest.Title">
            <summary>
            Title in the header.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.MessageBoxRequest.HeaderTemplate">
            <summary>
            Template for the header.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.MessageBoxRequest.Text">
            <summary>
            Content (body) text.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.MessageBoxRequest.BodyTemplate">
            <summary>
            Body (content) template.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.MessageBoxRequest.ShowCloseButton">
            <summary>
            Indicates whether to show the close button.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.MessageBoxRequest.Buttons">
            <summary>
            Buttons to show.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.MessageBoxRequest.PrimaryButton">
            <summary>
            Primary button (if you want to override the default).
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.MessageBoxRequest.CustomButtonText">
            <summary>
            Text for the <see cref="F:Havit.Blazor.Components.Web.MessageBoxButtons.Custom"/> button.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.MessageBoxRequest.AdditionalAttributes">
            <summary>
            Additional attributes to be splatted onto an underlying UI component (Bootstrap: HxMessageBox -> HxModal).
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.MessageBoxServiceCollectionExtensions">
            <summary>
            Extension methods for installation of <see cref="T:Havit.Blazor.Components.Web.IHxMessageBoxService"/> support.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.MessageBoxServiceCollectionExtensions.AddHxMessageBoxHost(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds <see cref="T:Havit.Blazor.Components.Web.IHxMessageBoxService"/> support to be able to display message boxes using HxMessageBoxHost.
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.FileUploadedEventArgs">
            <summary>
            Arguments for <see cref="P:Havit.Blazor.Components.Web.HxInputFileCore.OnFileUploaded"/> event.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.FileUploadedEventArgs.FileIndex">
            <summary>
            Index of the uploaded file.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.FileUploadedEventArgs.OriginalFileName">
            <summary>
            Name of the file provided by the browser.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.FileUploadedEventArgs.ContentType">
            <summary>
            MIME type of the file provided by the browser.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.FileUploadedEventArgs.Size">
            <summary>
            Size of the file provided by the browser.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.FileUploadedEventArgs.ResponseText">
            <summary>
            Response body received from the UploadUrl endpoint.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.FileUploadedEventArgs.ResponseStatus">
            <summary>
            Response status received from the UploadUrl endpoint.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.FileUploadedEventArgs.LastModified">
            <summary>
            Last modification date of the file provided by the browser.
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.HxInputFileCore">
            <summary>
            Raw component extending <see cref="T:Microsoft.AspNetCore.Components.Forms.InputFile"/> with direct upload.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxInputFileCore.Defaults">
            <summary>
            Application-wide defaults for the <see cref="T:Havit.Blazor.Components.Web.HxInputFileCore"/>.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.HxInputFileCore.GetDefaults">
            <summary>
            Returns component defaults.
            Enables overriding defaults in descendants (use a separate set of defaults).
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxInputFileCore.Settings">
            <summary>
            Set of settings to be applied to the component instance (overrides <see cref="P:Havit.Blazor.Components.Web.HxInputFileCore.Defaults"/>, overridden by individual parameters).
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.HxInputFileCore.GetSettings">
            <summary>
            Returns an optional set of component settings.
            </summary>
            <remarks>
            Similar to <see cref="M:Havit.Blazor.Components.Web.HxInputFileCore.GetDefaults"/>, enables defining wider <see cref="P:Havit.Blazor.Components.Web.HxInputFileCore.Settings"/> in component descendants (by returning a derived settings class).
            </remarks>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxInputFileCore.UploadUrl">
            <summary>
            URL of the server endpoint receiving the files.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxInputFileCore.OnProgress">
            <summary>
            Raised during running file upload (the frequency depends on browser implementation).
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.HxInputFileCore.InvokeOnProgressAsync(Havit.Blazor.Components.Web.UploadProgressEventArgs)">
            <summary>
            Triggers the <see cref="P:Havit.Blazor.Components.Web.HxInputFileCore.OnProgress"/> event. Allows interception of the event in derived components.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxInputFileCore.OnFileUploaded">
            <summary>
            Raised after a file is uploaded (for every single file separately).
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.HxInputFileCore.InvokeOnFileUploadedAsync(Havit.Blazor.Components.Web.FileUploadedEventArgs)">
            <summary>
            Triggers the <see cref="P:Havit.Blazor.Components.Web.HxInputFileCore.OnFileUploaded"/> event. Allows interception of the event in derived components.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxInputFileCore.OnUploadCompleted">
            <summary>
            Raised when all files are uploaded (after all <see cref="P:Havit.Blazor.Components.Web.HxInputFileCore.OnFileUploaded"/> events).
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.HxInputFileCore.InvokeOnUploadCompletedAsync(Havit.Blazor.Components.Web.UploadCompletedEventArgs)">
            <summary>
            Triggers the <see cref="P:Havit.Blazor.Components.Web.HxInputFileCore.OnUploadCompleted"/> event. Allows interception of the event in derived components.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxInputFileCore.Multiple">
            <summary>
            Single <c>false</c> or multiple <c>true</c> files upload.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxInputFileCore.Enabled">
            <summary>
            Make the item appear disabled by setting to <c>false</c>.
            The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxInputFileCore.Accept">
            <summary>
            Takes as its value a comma-separated list of one or more file types, or unique file type specifiers, describing which file types to allow.
            <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept">MDN Web Docs - HTML attribute: accept</see>.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxInputFileCore.MaxFileSize">
            <summary>
            The maximum file size in bytes.
            When exceeded, the <see cref="P:Havit.Blazor.Components.Web.HxInputFileCore.OnFileUploaded"/> returns <c>413-RequestEntityTooLarge</c> as <see cref="P:Havit.Blazor.Components.Web.FileUploadedEventArgs.ResponseStatus"/>.
            The default is <c>long.MaxValue</c> (unlimited).
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxInputFileCore.MaxParallelUploads">
            <summary>
            The maximum number of concurrent uploads. The default is <c>6</c>.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxInputFileCore.Id">
            <summary>
            The input element id.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxInputFileCore.FileCount">
            <summary>
            The last known count of associated files.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.HxInputFileCore.StartUploadAsync(System.String)">
            <summary>
            Initiates the upload (does not wait for upload completion). Use OnUploadCompleted event.
            </summary>
            <param name="accessToken">Authorization Bearer Token to be used for upload (i.e. use IAccessTokenProvider).</param>
            <remarks>
            We do not want to make the Havit.Blazor library dependent on WebAssembly libraries (IAccessTokenProvider and such). Therefor the accessToken here...
            </remarks>
        </member>
        <member name="M:Havit.Blazor.Components.Web.HxInputFileCore.UploadAsync(System.String)">
            <summary>
            Uploads the file(s).
            </summary>
            <param name="accessToken">Authorization Bearer Token to be used for upload (i.e. use IAccessTokenProvider).</param>
        </member>
        <member name="M:Havit.Blazor.Components.Web.HxInputFileCore.GetFilesAsync">
            <summary>
            Gets list of files chosen.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.HxInputFileCore.ResetAsync">
            <summary>
            Clears associated input element and resets component to initial state.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.HxInputFileCore.HandleUploadProgress(System.Int32,System.String,System.Int64,System.Int64)">
            <summary>
            Receive upload progress notification from underlying JavaScript.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.HxInputFileCore.HandleFileUploaded(System.Int32,System.String,System.Int64,System.String,System.Int64,System.Int32,System.String)">
            <summary>
            Receive upload finished notification from underlying JavaScript.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.HxInputFileCore.HandleUploadCompleted(System.Int32,System.Int64)">
            <summary>
            Receive upload finished notification from underlying javascript.
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.InputFileCoreSettings">
            <summary>
            Defaults for the <see cref="T:Havit.Blazor.Components.Web.HxInputFileCore"/>.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.InputFileCoreSettings.MaxFileSize">
            <summary>
            The maximum file size in bytes.
            When exceeded, the <see cref="P:Havit.Blazor.Components.Web.HxInputFileCore.OnFileUploaded"/> returns <c>413-RequestEntityTooLarge</c> as <see cref="P:Havit.Blazor.Components.Web.FileUploadedEventArgs.ResponseStatus"/>.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.InputFileCoreSettings.MaxParallelUploads">
            <summary>
            Maximum number of concurrent uploads.
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.UploadCompletedEventArgs">
            <summary>
            Arguments for <see cref="P:Havit.Blazor.Components.Web.HxInputFileCore.OnUploadCompleted"/> event.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.UploadCompletedEventArgs.FileCount">
            <summary>
            Total number of files uploaded.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.UploadCompletedEventArgs.TotalSize">
            <summary>
            Total size of files uploaded.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.UploadCompletedEventArgs.FilesUploaded">
            <summary>
            Files uploaded (event arguments of individual OnFileUploaded events).
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.UploadProgressEventArgs">
            <summary>
            Arguments for <see cref="P:Havit.Blazor.Components.Web.HxInputFileCore.OnProgress"/> event.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.UploadProgressEventArgs.FileIndex">
            <summary>
            Index of the uploaded file.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.UploadProgressEventArgs.OriginalFileName">
            <summary>
            Name of the file provided by the browser.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.UploadProgressEventArgs.UploadedBytes">
            <summary>
            Number of bytes uploaded.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.UploadProgressEventArgs.UploadSize">
            <summary>
            Upload request size (slightly larger than the file itself).
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.FormState">
            <summary>
            Form state to be used as a cascading value &amp; parameter.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.FormState.Enabled">
            <summary>
            Indicates whether the section is enabled or disabled.
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.HxFormState">
            <summary>
            Propagates form states as a cascading parameter to child components.<br />
            Full documentation and demos: <see href="https://havit.blazor.eu/components/HxFormState">https://havit.blazor.eu/components/HxFormState</see>
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxFormState.CascadingFormState">
            <summary>
            Received form state.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxFormState.Enabled">
            <summary>
            Indicates enabled/disabled section. Value to propagate.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxFormState.Visible">
            <summary>
            When <c>false</c>, nothing is rendered (no children). Value is not propagated, there is nowhere to propagate.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxFormState.ChildContent">
            <summary>
            Child content.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.HxFormState.CreateNewCascadingFormState">
            <summary>
            Create form state to propagate.
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.HxModelEditForm`1">
            <summary>
            Edit form wrapper which provides a strongly typed model and updates the model instance when a valid form is submitted.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxModelEditForm`1.Id">
            <summary>
            Form element id.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxModelEditForm`1.Model">
            <summary>
            Model.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxModelEditForm`1.ModelChanged">
            <summary>
            Model event callback. Invoked when a valid form is updated.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.HxModelEditForm`1.InvokeModelChangedAsync(`0)">
            <summary>
            Triggers the <see cref="P:Havit.Blazor.Components.Web.HxModelEditForm`1.ModelChanged"/> event. Allows interception of the event in derived components.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxModelEditForm`1.ChildContent">
            <summary>
            Child content.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxModelEditForm`1.ModelInEdit">
            <summary>
            Model being edited (a clone of the Model).
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.HxModelEditForm`1.OnModelSet">
            <summary>
            Fired when a new model is set from outside (data bind, etc.).
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.HxModelEditForm`1.UpdateModelAsync">
            <summary>
            Updates the Model with the current ModelInEdit.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.HxModelEditForm`1.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)">
            <inheritdoc cref="M:Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)" />
        </member>
        <member name="T:Havit.Blazor.Components.Web.InputMode">
            <summary>
            Enum for <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode">HTML input modes</see>.
            </summary>
        </member>
        <member name="F:Havit.Blazor.Components.Web.InputMode.Text">
            <summary>
            Standard input keyboard for the user's current locale.
            </summary>
        </member>
        <member name="F:Havit.Blazor.Components.Web.InputMode.None">
            <summary>
            No virtual keyboard. For when the page implements its own keyboard input control.
            </summary>
        </member>
        <member name="F:Havit.Blazor.Components.Web.InputMode.Decimal">
            <summary>
            Fractional numeric input keyboard containing the digits and decimal separator for the user's locale
            (typically <kbd>.</kbd> or <kbd>,</kbd>). Devices may or may not show a minus key (<kbd>-</kbd>).
            </summary>
        </member>
        <member name="F:Havit.Blazor.Components.Web.InputMode.Numeric">
            <summary>
            Numeric input keyboard, but only requires the digits <kbd>0</kbd>–<kbd>9</kbd>. Devices may or may not show a minus key.
            </summary>
        </member>
        <member name="F:Havit.Blazor.Components.Web.InputMode.Tel">
            <summary>
            A telephone keypad input, including the digits <kbd>0</kbd>–<kbd>9</kbd>, the asterisk (<kbd>*</kbd>), and the pound (<kbd>#</kbd>) key.
            Inputs that *require* a telephone number should typically use <c>InputType.Tel</c> instead.
            </summary>
        </member>
        <member name="F:Havit.Blazor.Components.Web.InputMode.Search">
            <summary>
            A virtual keyboard optimized for search input. For instance, the return/submit key may be labeled
            "Search", along with possible other optimizations. Inputs that require a search query should typically
            use <c>InputType.Search</c> instead.
            </summary>
        </member>
        <member name="F:Havit.Blazor.Components.Web.InputMode.Email">
            <summary>
            A virtual keyboard optimized for entering email addresses. Typically includes the <kbd>@</kbd> character
            as well as other optimizations. Inputs that require email addresses should typically use <c>InputType.Email</c> instead.
            </summary>
        </member>
        <member name="F:Havit.Blazor.Components.Web.InputMode.Url">
            <summary>
            A keypad optimized for entering URLs. This may have the <kbd>/</kbd> key more prominent, for example.
            Enhanced features could include history access and so on. Inputs that require a URL should typically
            use <c>InputType.Url</c> instead.
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.InputType">
            <summary>
            Enum for <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types">HTML input types</see>.
            </summary>
            <remarks>
            As the enum is currently used only for the <c>HxInputText</c> component, only relevant types are included.
            As all the values will be needed, they can be added later (add restrictions/validation to <c>HxInputText</c> then).
            </remarks>
        </member>
        <member name="F:Havit.Blazor.Components.Web.InputType.Text">
            <summary>
            The default value. A single-line text field. Line-breaks are automatically removed from the input value.
            </summary>
        </member>
        <member name="F:Havit.Blazor.Components.Web.InputType.Email">
            <summary>
            A field for editing an email address. It looks like a <see cref="F:Havit.Blazor.Components.Web.InputType.Text"/> input, but has validation parameters
            and a relevant keyboard in supporting browsers and devices with dynamic keyboards.
            </summary>
        </member>
        <member name="F:Havit.Blazor.Components.Web.InputType.Password">
            <summary>
            A single-line text field whose value is obscured. It will alert the user if the site is not secure.
            </summary>
        </member>
        <member name="F:Havit.Blazor.Components.Web.InputType.Search">
            <summary>
            A single-line text field for entering search strings. Line-breaks are automatically removed from the input value.
            It may include a delete icon in supporting browsers that can be used to clear the field. It displays a search icon instead
            of the enter key on some devices with dynamic keypads.
            </summary>
        </member>
        <member name="F:Havit.Blazor.Components.Web.InputType.Tel">
            <summary>
            A control for entering a telephone number. It displays a telephone keypad on some devices with dynamic keypads.
            </summary>
        </member>
        <member name="F:Havit.Blazor.Components.Web.InputType.Url">
            <summary>
            A field for entering a URL. It looks like a <see cref="F:Havit.Blazor.Components.Web.InputType.Text"/> input, but has validation parameters and a relevant
            keyboard in supporting browsers and devices with dynamic keyboards.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.ModelCloner.Clone``1(``0)">
            <summary>
            Returns a model clone.
            Uses strategies (in order):
            * <see cref="T:System.ICloneable" />
            * C# Records
            * Object.MemberwiseClone
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.HxChangeTracker">
            <summary>
            Subscribes to INotifyPropertyChanged changes and triggers re-rendering of ChildContent.
            To be used when you want to limit the scope of re-rendering and prevent re-rendering of a wider component.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxChangeTracker.ChildContent">
            <summary>
            The content to which the value should be provided.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxChangeTracker.Value">
            <summary>
            The value to be tracked.
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.HxDynamicElement">
            <summary>
            Renders an element with the specified name, attributes, and child content.<br />
            Full documentation and demos: <see href="https://havit.blazor.eu/components/HxDynamicElement">https://havit.blazor.eu/components/HxDynamicElement</see>
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxDynamicElement.ElementName">
            <summary>
            Gets or sets the name of the element to render.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxDynamicElement.OnClick">
            <summary>
            Raised after the element is clicked.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.HxDynamicElement.InvokeOnClickAsync(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Triggers the <see cref="P:Havit.Blazor.Components.Web.HxDynamicElement.OnClick"/> event. Allows interception of the event in derived components.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxDynamicElement.OnClickStopPropagation">
            <summary>
            Stops onClick event propagation. Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxDynamicElement.OnClickPreventDefault">
            <summary>
            Prevents the default action for the onclick event. Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxDynamicElement.ElementRef">
            <summary>
            Element reference.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxDynamicElement.ElementRefChanged">
            <summary>
            Action (synchronous, not an EventCallback) called when the element's reference is captured.
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.HxRedirectTo">
            <summary>
            Rendering a <c>HxRedirectTo</c> will navigate to a new location.<br/>
            Can be used in <c>AuthorizeRouteView</c>, <c>Router</c> and similar components to redirect to a login page, error page, or similar.<br />
            Full documentation and demos: <see href="https://havit.blazor.eu/components/HxRedirectTo">https://havit.blazor.eu/components/HxRedirectTo</see>
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxRedirectTo.Uri">
            <summary>
            URI to navigate to.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxRedirectTo.ForceLoad">
            <summary>
            If <c>true</c>, bypasses client-side routing and forces the browser to load the new
            page from the server, regardless of whether the URI would normally be handled by the
            client-side router.<br/>
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.HxRepeater`1">
            <summary>
            A data-bound list component that allows custom layout by repeating a specified template for each item displayed in the list.
            Analogous to the ASP.NET WebForms Repeater control.<br />
            Full documentation and demos: <see href="https://havit.blazor.eu/components/HxRepeater">https://havit.blazor.eu/components/HxRepeater</see>
            </summary>
            <typeparam name="TItem">The type of the item</typeparam>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxRepeater`1.HeaderTemplate">
            <summary>
            The template that defines how the header section of the Repeater component is displayed.
            Renders only if there are any items to display.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxRepeater`1.ItemTemplate">
            <summary>
            The template that defines how items in the Repeater component are displayed.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxRepeater`1.FooterTemplate">
            <summary>
            The template that defines how the footer section of the Repeater component is displayed.
            Renders only if there are any items to display.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxRepeater`1.NullTemplate">
            <summary>
            The template that defines what should be rendered in case of Items being null.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxRepeater`1.EmptyTemplate">
            <summary>
            The template that defines what should be rendered in case of empty Items.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxRepeater`1.Data">
            <summary>
            The items to be rendered.
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.HxIcon">
            <summary>
            Displays an icon.
            Currently supports <see href="https://icons.getbootstrap.com/" target="_blank">Bootstrap icons</see> through the <c>BootstrapIcon</c> class.<br />
            Full documentation and demos can be found at <see href="https://havit.blazor.eu/components/HxIcon">https://havit.blazor.eu/components/HxIcon</see>.
            You can easily add your own icon set.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxIcon.Icon">
            <summary>
            The icon to display.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxIcon.CssClass">
            <summary>
            The CSS class to combine with the basic icon CSS class.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.HxIcon.AdditionalAttributes">
            <summary>
            Additional attributes to be splatted onto an underlying HTML element.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.HxIcon.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)">
            <inheritdoc cref="M:Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)" />
        </member>
        <member name="T:Havit.Blazor.Components.Web.IconBase">
            <summary>
            Base class for icons.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.IconBase.RendererComponentType">
            <summary>
            Renderer of the icon. Must have an Icon property which receives the instance of the icon (IconBase descendant instance).
            See BootstrapIcon and <see cref="T:Havit.Blazor.Components.Web.HxIcon"/> implementations for more details.
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.Infrastructure.CascadeEnabledComponent">
            <summary>
            <see cref="T:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent"/> helper method.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Infrastructure.CascadeEnabledComponent.EnabledEffective(Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent)">
            <summary>
            Effective value of Enabled. When Enabled is not set, it receives the value from FormState or defaults to true.
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent">
            <summary>
            Component which can be enabled/disabled in a cascade.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.FormState">
            <summary>
            Form state cascading parameter.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled">
            <summary>
            When <c>null</c> (default), the Enabled value is received from the cascading <see cref="P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.FormState" />.
            When the value is <c>false</c>, the input is rendered as disabled.
            To set multiple controls as disabled, use <seealso cref="T:Havit.Blazor.Components.Web.HxFormState" />.
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.Internal.HxDeferInternal">
            <summary>
            For internal use only. Do not use.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.Internal.HxDeferInternal.ChildContent">
            <summary>
            For internal use only. Do not use.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Internal.HxDeferInternal.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)">
            <summary>
            For internal use only. Do not use.
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.HxMessengerService">
            <summary>
            Propagates access to HxMessenger as <see cref="T:Havit.Blazor.Components.Web.IHxMessengerService" />.
            </summary>
        </member>
        <member name="E:Havit.Blazor.Components.Web.HxMessengerService.OnMessage">
            <inheritdoc cref="E:Havit.Blazor.Components.Web.IHxMessengerService.OnMessage" />
        </member>
        <member name="E:Havit.Blazor.Components.Web.HxMessengerService.OnClear">
            <inheritdoc cref="E:Havit.Blazor.Components.Web.IHxMessengerService.OnClear" />
        </member>
        <member name="M:Havit.Blazor.Components.Web.HxMessengerService.AddMessage(Havit.Blazor.Components.Web.MessengerMessage)">
            <inheritdoc cref="M:Havit.Blazor.Components.Web.IHxMessengerService.AddMessage(Havit.Blazor.Components.Web.MessengerMessage)" />
        </member>
        <member name="M:Havit.Blazor.Components.Web.HxMessengerService.Clear">
            <inheritdoc cref="M:Havit.Blazor.Components.Web.IHxMessengerService.Clear" />
        </member>
        <member name="T:Havit.Blazor.Components.Web.IHxMessengerService">
            <summary>
            Provides methods for adding and showing messages. Additional extension methods are available in the concrete implementation.
            </summary>
        </member>
        <member name="E:Havit.Blazor.Components.Web.IHxMessengerService.OnMessage">
            <summary>
            Subscription seam for the HxMessenger component to be able to receive messages.
            </summary>
        </member>
        <member name="E:Havit.Blazor.Components.Web.IHxMessengerService.OnClear">
            <summary>
            Subscription seam for the HxMessenger component to be able to receive the Clear() command.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.IHxMessengerService.AddMessage(Havit.Blazor.Components.Web.MessengerMessage)">
            <summary>
            Adds and shows a message.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.IHxMessengerService.Clear">
            <summary>
            Removes all messages.
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.MessengerMessage">
            <summary>
            Messenger message.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.MessengerMessage.Key">
            <summary>
            Key. Used for component pairing during rendering (@key).
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.MessengerMessage.Icon">
            <summary>
            Message icon (header).
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.MessengerMessage.CssClass">
            <summary>
            CSS class.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.MessengerMessage.AutohideDelay">
            <summary>
            Delay in milliseconds to auto-hide message.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.MessengerMessage.Title">
            <summary>
            Message title (header).
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.MessengerMessage.HeaderTemplate">
            <summary>
            Custom message header.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.MessengerMessage.Text">
            <summary>
            Message text (body).
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.MessengerMessage.ContentTemplate">
            <summary>
            Custom message body (content).
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.MessengerServiceCollectionExtensions">
            <summary>
            Extension methods for installation of HxMessenger support.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.MessengerServiceCollectionExtensions.AddHxMessenger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds <see cref="T:Havit.Blazor.Components.Web.IHxMessengerService"/> support to be able to add messages to HxMessenger.
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.RenderFragmentBuilder">
            <summary>
            Build render fragments for specific scenarios.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.RenderFragmentBuilder.Empty">
            <summary>
            Returns a RenderFragment to render "nothing". The implementation returns <c>null</c>.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.RenderFragmentBuilder.CreateFrom(System.String,Microsoft.AspNetCore.Components.RenderFragment)">
            <summary>
            Returns a RenderFragment that renders content and a template (it is expected that at least one of the arguments is null).		
            If both are <c>null</c>, it returns <see cref="M:Havit.Blazor.Components.Web.RenderFragmentBuilder.Empty"/>.
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.SelectorHelpers">
            <summary>
            Helper methods for selectors.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.SelectorHelpers.GetText``1(System.Func{``0,System.String},``0)">
            <summary>
            Returns text from an item based on the textSelector.
            When the textSelector is <c>null</c>, it returns item.ToString().
            It never returns <c>null</c>. Instead, <c>null</c> values are converted to an empty string.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.SelectorHelpers.GetValue``2(System.Func{``0,``1},``0)">
            <summary>
            When the item is <c>null</c>, it returns <c>default(TValue)</c>.
            Otherwise, it returns the value from the item based on the valueSelector.
            When the valueSelector is <c>null</c> and <c>TValue</c> is the same as <c>TItem</c>, it returns the item.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.ServiceCollectionExtensions.AddHxServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds services needed for HAVIT Blazor library.
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.Services.DataStores.DictionaryStaticDataStore`2">
            <summary>
            Abstract base-class for implementation of your own dictionary-style static data store.
            </summary>
            <remarks>
            Uses an in-memory Dictionary to store the data.
            Does not preload data; the data is loaded within the first data-retrieval call.
            Does not implement any memory-release logic; the data is refreshed within data-retrievals where <see cref="M:Havit.Blazor.Components.Web.Services.DataStores.DictionaryStaticDataStore`2.ShouldRefresh"/> returns <c>true</c>.
            </remarks>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.DictionaryStaticDataStore`2.LoadDataAsync">
            <summary>
            Template method to implement the data retrieval logic.
            You should never call this method directly; use <see cref="M:Havit.Blazor.Components.Web.Services.DataStores.DictionaryStaticDataStore`2.EnsureDataAsync"/> to load data.
            This method is sequential (does not allow parallel runs); just take care of the data retrieval.
            Must return a non-<c>null</c> value; use Enumerable.Empty if needed.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.Services.DataStores.DictionaryStaticDataStore`2.KeySelector">
            <summary>
            Template selector to be used when building the dictionary from retrieved data.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.Services.DataStores.DictionaryStaticDataStore`2.IsLoaded">
            <summary>
            Indicates whether the store has valid data.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.DictionaryStaticDataStore`2.ShouldRefresh">
            <summary>
            Template method to implement your own logic of data expiration/refresh.
            Gets called within all data-retrieval calls to check for refreshment need.<br />
            Can be implemented as "<c>=> false</c>" if you do not want the data to ever expire.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.DictionaryStaticDataStore`2.GetAllAsync">
            <summary>
            Returns all data from the store (includes data load if needed).
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.DictionaryStaticDataStore`2.GetAll(System.Boolean)">
            <summary>
            Returns all data from the store (requires <see cref="M:Havit.Blazor.Components.Web.Services.DataStores.DictionaryStaticDataStore`2.EnsureDataAsync"/> to be called first).
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.DictionaryStaticDataStore`2.GetByKeyAsync(`0)">
            <summary>
            Retrieves a value from the dictionary (includes data load if needed). Throws an exception when the key is not found.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.DictionaryStaticDataStore`2.GetByKey(`0,System.Boolean)">
            <summary>
            Retrieves a value from the dictionary (requires <see cref="M:Havit.Blazor.Components.Web.Services.DataStores.DictionaryStaticDataStore`2.EnsureDataAsync"/> to be called first). Throws an exception when the key is not found.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.DictionaryStaticDataStore`2.GetByKeyOrDefaultAsync(`0,`1)">
            <summary>
            Retrieves a value from the dictionary (includes data load if needed). Returns <c>default</c> when not found.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.DictionaryStaticDataStore`2.GetByKeyOrDefault(`0,`1,System.Boolean)">
            <summary>
            Retrieves a value from the dictionary (requires <see cref="M:Havit.Blazor.Components.Web.Services.DataStores.DictionaryStaticDataStore`2.EnsureDataAsync"/> to be called first). Returns <c>defaultValue</c> when not found.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.DictionaryStaticDataStore`2.Clear">
            <summary>
            Throws away all the data.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.DictionaryStaticDataStore`2.EnsureDataAsync">
            <summary>
            To be called before any data-retrieval to load/refresh the data.<br/>
            Is automatically called before all asynchronous data-retrieval calls.
            You have to call this method on your own (e.g. in <c>OnInitializedAsync</c>) before calling any synchronous API.<br/>
            Uses <see cref="M:Havit.Blazor.Components.Web.Services.DataStores.DictionaryStaticDataStore`2.ShouldRefresh"/> to check for refreshment request.
            Uses a lock to prevent multiple parallel loads.
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.Services.DataStores.IDictionaryStaticDataStore`2">
            <summary>
            Base interface for Blazor dictionary-based static data stores.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.IDictionaryStaticDataStore`2.EnsureDataAsync">
            <summary>
            To be called before any data retrieval to load/refresh the data.<br/>
            Is automatically called before all asynchronous data retrieval calls.
            You have to call this method on your own (e.g. in <c>OnInitializedAsync</c>) before calling any synchronous API.<br/>
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.Services.DataStores.IDictionaryStaticDataStore`2.IsLoaded">
            <summary>
            Indicates whether the store has valid data.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.IDictionaryStaticDataStore`2.GetAllAsync">
            <summary>
            Returns all data from the store (includes data load if needed).
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.IDictionaryStaticDataStore`2.GetAll(System.Boolean)">
            <summary>
            Returns all data from the store (requires <see cref="M:Havit.Blazor.Components.Web.Services.DataStores.IDictionaryStaticDataStore`2.EnsureDataAsync"/> to be called first).
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.IDictionaryStaticDataStore`2.GetByKeyAsync(`0)">
            <summary>
            Retrieves value from dictionary (includes data load if needed). Throws an exception when the key is not found.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.IDictionaryStaticDataStore`2.GetByKey(`0,System.Boolean)">
            <summary>
            Retrieves value from dictionary (requires <see cref="M:Havit.Blazor.Components.Web.Services.DataStores.IDictionaryStaticDataStore`2.EnsureDataAsync"/> to be called first). Throws an exception when the key is not found.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.IDictionaryStaticDataStore`2.GetByKeyOrDefaultAsync(`0,`1)">
            <summary>
            Retrieves value from dictionary (includes data load if needed). Returns <c>default</c> when not found.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.IDictionaryStaticDataStore`2.GetByKeyOrDefault(`0,`1,System.Boolean)">
            <summary>
            Retrieves value from dictionary (requires <see cref="M:Havit.Blazor.Components.Web.Services.DataStores.IDictionaryStaticDataStore`2.EnsureDataAsync"/> to be called first). Returns <c>defaultValue</c> when not found.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.IDictionaryStaticDataStore`2.Clear">
            <summary>
            Discards all the data.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.IStaticDataStore`1.EnsureDataAsync">
            <summary>
            To be called before any data-retrieval to load/refresh the data.<br/>
            Is automatically called before all asynchronous data-retrieval calls.
            You have to call this method on your own (e.g. in <c>OnInitializedAsync</c>) before calling any synchronous API.<br/>
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.Services.DataStores.IStaticDataStore`1.IsLoaded">
            <summary>
            Indicates whether the store has valid data.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.IStaticDataStore`1.Clear">
            <summary>
            Discards all the data.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.IStaticDataStore`1.GetValue(System.Boolean)">
            <summary>
            Retrieves a value from the store (requires <see cref="M:Havit.Blazor.Components.Web.Services.DataStores.IStaticDataStore`1.EnsureDataAsync"/> to be called first).
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.IStaticDataStore`1.GetValueAsync">
            <summary>
            Retrieves a value from the store (includes data load if needed).
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.Services.DataStores.StaticDataStore`1">
            <summary>
            Abstract base-class for implementation of your own single-value static data store.
            </summary>
            <remarks>
            Uses an in-memory static field to store the data.
            Does not preload data, the data is loaded within the first data-retrieval call.
            Does not implement any memory-release logic, the data is refreshed within data-retrievals where <see cref="M:Havit.Blazor.Components.Web.Services.DataStores.StaticDataStore`1.ShouldRefresh"/> returns <c>true</c>.
            </remarks>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.StaticDataStore`1.LoadDataAsync">
            <summary>
            Template method to implement the data retrieval logic.
            You should never call this method directly, use <see cref="M:Havit.Blazor.Components.Web.Services.DataStores.StaticDataStore`1.EnsureDataAsync"/> to load data.
            This method is sequential (does not allow parallel runs), just take care of the data retrieval.
            Must return a non-<c>default</c> value.
            </summary>
        </member>
        <member name="P:Havit.Blazor.Components.Web.Services.DataStores.StaticDataStore`1.IsLoaded">
            <summary>
            Indicates whether the store has valid data.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.StaticDataStore`1.ShouldRefresh">
            <summary>
            Template method to implement your own logic of data expiration/refresh.
            Gets called within all data-retrieval calls to check for refreshment need.<br />
            Can be implemented as "<c>=> false</c>" if you do not want the data to ever expire.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.StaticDataStore`1.GetValueAsync">
            <summary>
            Returns the value from the store (includes data load if needed).
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.StaticDataStore`1.GetValue(System.Boolean)">
            <summary>
            Returns the value from the store (requires <see cref="M:Havit.Blazor.Components.Web.Services.DataStores.StaticDataStore`1.EnsureDataAsync"/> to be called first).
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.StaticDataStore`1.Clear">
            <summary>
            Throws away all the data.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.Services.DataStores.StaticDataStore`1.EnsureDataAsync">
            <summary>
            To be called before any data-retrieval to load/refresh the data.<br/>
            Is automatically called before all asynchronous data-retrieval calls.
            You have to call this method on your own (e.g. in <c>OnInitializedAsync</c>) before calling any synchronous API.<br/>
            Uses <see cref="M:Havit.Blazor.Components.Web.Services.DataStores.StaticDataStore`1.ShouldRefresh"/> to check for refreshment request.
            Uses a lock to prevent multiple parallel loads.
            </summary>
        </member>
        <member name="T:Havit.Blazor.Components.Web.StringLocalizerFactoryExtensions">
            <summary>
            Extension methods for IStringLocalizerFactory.
            </summary>
        </member>
        <member name="M:Havit.Blazor.Components.Web.StringLocalizerFactoryExtensions.GetLocalizedValue(Microsoft.Extensions.Localization.IStringLocalizerFactory,System.String,System.Type)">
            <summary>
            Returns the localized value when resourceType is not <c>null</c> (value used as the resource name).
            Otherwise, returns the value (without attempting to get the localized value).
            </summary>
        </member>
    </members>
</doc>
