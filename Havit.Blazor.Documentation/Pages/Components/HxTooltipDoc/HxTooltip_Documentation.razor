@attribute [Route("/components/" + nameof(HxTooltip))]

<ComponentApiDoc Type="typeof(HxTooltip)">

	<DocAlert Type="DocAlertType.Warning">
		The tooltip wrapper is rendered only if the <code>Text</code> or <code>WrapperCssClass</code> parameter is set.
		If both are <code>null</code> or empty, only the <code>ChildContent</code> is rendered.
	</DocAlert>

    <DocHeading Title="Basic usage" />
    <Demo Type="typeof(HxTooltip_Demo_BasicUsage)" Tabs="false" />

    <DocHeading Title="HxButton support" />
	<p>The tooltip support is also built-in in the <a href="/components/@nameof(HxButton)">@nameof(HxButton)</a> component via the <code>Tooltip</code> parameter.</p>
	<Demo Type="typeof(HxTooltip_Demo_Button)" Tabs="false" />

    <DocHeading Title="Placement" />
	<p>You can change the placement of the tooltip with the <code>@nameof(HxTooltip.Placement)</code> parameter:</p>
	<Demo Type="typeof(HxTooltip_Demo_Placement)" />

    <DocHeading Title="HTML content" />
	<p>Use <code>Html="true"</code> to enable HTML in the tooltip.</p>
	<Demo Type="typeof(HxTooltip_Demo_HtmlContent)" />

    <DocHeading Title="Programmability" />
	<p>
		You can use the <code>ShowAsync()</code> and <code>HideAsync()</code> methods, as well as the <code>OnShown</code> and <code>OnHidden</code> events,
		to program your own interaction.
	</p>
	<Demo Type="typeof(HxTooltip_Demo_MethodsEvents)" />
	<p>You can also use the <code>DisableAsync()</code> and <code>EnableAsync()</code> methods to control the popover behavior.</p>
	<Demo Type="typeof(HxTooltip_Demo_EnableDisable)" />

</ComponentApiDoc>
