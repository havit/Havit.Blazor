@attribute [Route("/components/" + nameof(HxCheckbox))]
@attribute [Route("/components/HxInputCheckbox")]

<ComponentApiDoc Type="typeof(HxCheckbox)">

    <DocAlert Type="DocAlertType.Info">
        <code>HxCheckbox</code> replaces the former <code>HxInputCheckbox</code> component, which was dropped in v4.0.0.
        <ul class="mb-0">
            <li><code>HxInputCheckbox.Label</code> is now <code>HxCheckbox.Text</code></li>
            <li>The new <code>Label</code> parameter corresponds to the optional <code>.form-label</code></li>
        </ul>
    </DocAlert>

    <DocHeading Title="Basic usage" />
    <Demo Type="typeof(HxCheckbox_Demo)" Tabs="false" />

    <DocHeading Title="Inline" />
    <p>Group checkboxes on the same horizontal row by adding <code>Inline="true"</code> to the checkboxes.</p>
    <DocAlert Type="DocAlertType.Warning">
        Our CSS defaults bring flex-column to the <code>&lt;form&gt;</code> element (<code>EditForm</code> component),
        every single direct child component of <code>&lt;form&gt;</code> is stacked vertically.<br />
        This setup implies that whenever you want to go for horizontal stacking, you have to wrap your items in some
        element (usually <code>&lt;div&gt;</code>). This also applies to the inline checkboxes.
    </DocAlert>
    <Demo Type="typeof(HxCheckbox_Demo_Inline)" />

    <DocHeading Title="Reverse" />
    <p>Put the checkbox on the opposite side by setting the <code>Reverse</code> parameter to <code>true</code>.</p>
    <Demo Type="typeof(HxCheckbox_Demo_Reverse)" />

    <DocHeading Title="Button groups" />
    <p><code>HxCheckbox</code> can be used within <a href="/components/HxButtonGroup#CheckboxesAndRadios">HxButtonGroup</a>.</p>
</ComponentApiDoc>