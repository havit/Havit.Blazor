@attribute [Route("/components/" + nameof(HxGrid))]
@attribute [Route("/components/" + nameof(HxGridColumn<object>))]

<ComponentApiDoc Type="typeof(HxGrid<TItem>)">
	<MainContent>

		<DocHeading Title="Basic usage" />
		<p>
			To define <strong>columns</strong>, use the <code>HxGridColumn</code> components.
			You can specify the <code>HeaderText</code> and <code>ItemTextSelector</code> parameters.
		</p>
		<p>
			To connect the grid to your <strong>data</strong>, implement the <code>@nameof(HxGrid<object>.DataProvider)</code> method.
			This method receives a "request" (for sorting and paging requirements) and yields a "result" (items for display along with the total item count).
		</p>
		<Demo Type="typeof(HxGrid_Demo)" Tabs="false" />
		<DocAlert Type="DocAlertType.Warning">
			The <code>@nameof(HxGrid).@nameof(HxGrid<object>.DataProvider)</code> should always return
			an instance of <code>@nameof(GridDataProviderResult<object>)</code>, <code>null</code> is not allowed.
			The method you provide should be <code>async</code> and should
			<code>await</code> the data if needed (loading progress is indicated in the meantime).
		</DocAlert>
		<DocDemoDataServiceNote />

		<DocHeading Title="Automatic sorting and paging" Id="ApplyTo" />
		<p>
			If you have your <code>IEnumerable</code> data-source ready (all items preloaded in memory),
			you can use the <code>request.ApplyTo(data)</code> extension method to apply sorting and paging automatically.
		</p>
		<Demo Type="typeof(HxGrid_Demo_ApplyTo)" />


		<DocHeading Title="Using IQueryable" Id="IQueryable" Level="3" />
		<p>
			When utilizing <code>IQueryable</code> as your data source provider, commonly seen in Blazor Server applications,
			you can employ the <code>data.ApplyGridDataProviderRequest(request)</code> method.
		</p>
		<p>
			This method enables the application of sorting and paging to your data source.
			Subsequently, you are required to "execute" the queries independently.
			This necessity arises because our components lack access to cancellable asynchronous methods
			such as <code>CountAsync</code> and <code>ToListAsync</code>.
			Employing cancellable methods is particularly critical in scenarios like infinite scrolling.
		</p>
		<Demo Type="typeof(HxGrid_Demo_Queryable)" />


		<DocHeading Title="Refreshing data" Id="RefreshData" />
		<p>
			To refresh data in the grid, such as when there's a change in the filter being applied,
			use the <code>gridComponent.RefreshDataAsync()</code> method.
			This action informs the grid to request updated data from the <code>DataProvider</code>.
		</p>
		<Demo Type="typeof(HxGrid_Demo_RefreshData)" />


		<DocHeading Title="Empty data" />
		<p>
			When the <code>DataProvider</code> returns no data, the <code>EmptyDataTemplate</code> is rendered.
			If you do not set your own content, the <code>&lt;HxGridDefaultEmptyDataTemplateContent /&gt;</code> is used.
		</p>
		<Demo Type="typeof(HxGrid_Demo_EmptyData)" />



		<DocHeading Title="Content navigation modes" />
		<p>
			<code>HxGrid</code> offers various navigation modes, configurable through the <code>ContentNavigationMode</code> parameter.
			The default mode is set to <code>Pagination</code>.
		</p>


		<DocHeading Title="Infinite scroll (virtualized)" Id="InfiniteScroll" Level="3" />
		<p>
			Enable <strong>continuous scrolling</strong> in <code>HxGrid</code> by setting <code>ContentNavigationMode="GridContentNavigationMode.InfiniteScroll"</code>.
			This feature leverages the capabilities, requirements, and limitations of Blazor's
			<a href="https://learn.microsoft.com/en-us/aspnet/core/blazor/components/virtualization">Virtualize</a> component.
		</p>
		<DocAlert Type="DocAlertType.Warning">
			It's important to specify the <code>ItemRowHeight</code> for effective virtualization. By default, it is 41 pixels, aligning with the standard table row height in Bootstrap.
		</DocAlert>
		<Demo Type="typeof(HxGrid_Demo_InfiniteScroll)" />


		<DocHeading Title="Load more button" Id="LoadMore" Level="3" />
		<p>With <code>ContentNavigationMode.LoadMore</code> you can allow loading additional items with a <i>Load more</i> button.</p>
		<Demo Type="typeof(HxGrid_Demo_LoadMore)" />
		<p>
			Customize the button text using <code>LoadMoreButtonText</code>, or design your own navigation interface with <code>LoadMoreTemplate</code>.
			This customization can be achieved using the <code>context.LoadMoreAsync()</code> method.
		</p>
		<p>
			It's also possible to combine the <i>Load More</i> button with pagination by opting for <code>GridContentNavigationMode.PaginationAndLoadMore</code>.
		</p>

		<DocHeading Title="Custom paging" Level="3" />
		<p>
			<code>HxGrid</code> uses the <code>HxPager</code> to display pagination, unless a value for the <code>PaginationTemplate</code> parameter is provided.
			Context information is provided via <a href="@($"/types/{nameof(GridPaginationTemplateContext)}")"><code>GridPaginationTemplateContext</code></a> to your pager.
		</p>
		<Demo Type="typeof(HxGrid_Demo_CustomPagination)" />

		<DocHeading Title="Context menu" Id="context-menu" />
		<p>
			Add a context menu to the grid using <code>@(nameof(HxContextMenuGridColumn<TItem>))</code>.
			For additional information, refer to <a href="components/@(nameof(HxContextMenu))">@(nameof(HxContextMenu))</a>.
		</p>
		<Demo Type="typeof(HxGrid_Demo_ContextMenu)" />


		<DocHeading Title="Multiselect with checkboxes" Id="multiselect" />
		<p>
			Enable multi-row selection for users by setting <code>@nameof(HxGrid<object>.MultiSelectionEnabled)="true"</code>.
			The selected items can be accessed via the <code>@nameof(HxGrid<object>.SelectedDataItems)</code> parameter, which is bindable.
		</p>
		<DocAlert>
			Note that <code>@nameof(HxGrid<TItem>.SelectedDataItems)</code> only includes visible items.
			Items are removed from the selection when they become unrendered (for example, after paging, sorting, etc.).
			Additionally, <code>@nameof(HxGrid<TItem>.MultiSelectionEnabled)</code> is not compatible
			with <code>@nameof(GridContentNavigationMode.InfiniteScroll)</code>.<br />
			This design decision might change in the future.
		</DocAlert>
		<Demo Type="typeof(HxGrid_Demo_Multiselect)" />


		<DocHeading Title="Inline-editing" />
		<p>
			To enable inline editing, utilize the <code>SelectedDataItem</code> and create an editing interface for such items.
			This can be accomplished by defining the content of the <code>ItemTemplate</code> within <code>HxGridColumn</code>.
			Use the <code>SelectedDataItemChanged</code> event to save modifications,
			or alternatively, include a column with command buttons for this purpose.
		</p>
		<Demo Type="typeof(HxGrid_Demo_InlineEditing)" />


		<DocHeading Title="Filtering from headers" Id="header-filtering" />
		<p>
			Set up filtering for individual columns by integrating your filtering interface
			into the <code>HeaderTemplate</code> of each column.
			Then, apply the filters to the data within the <code>DataProvider</code>
			based on the input values.
		</p>
		<Demo Type="typeof(HxGrid_Demo_HeaderFiltering)" />


		<DocHeading Title="Hoverable rows" Id="hover" />
		<p>
			The <code>@nameof(HxGrid<TItem>.Hover)</code> parameter allows you to enable or disable the hover state on rows.
			By default, the hover state is active when the grid's item selection feature is enabled, unless otherwise specified.
		</p>
		<Demo Type="typeof(HxGrid_Demo_Hover)" />


		<DocHeading Title="Striped rows" Id="striped" />
		<p>
			Use the <code>@nameof(HxGrid<TItem>.Striped)</code> parameter to add zebra-striping, creating alternating row colors.
		</p>
		<Demo Type="typeof(HxGrid_Demo_Striped)" />


		<DocHeading Title="Persisting the state" Id="persisting-state" />
		<p>
			Persist the grid state by loading or saving the <code>@nameof(HxGrid<TItem>.CurrentUserState)</code> parameter.
			The <code>@nameof(GridUserState)</code> class is designed to be serializable.
		</p>
		<DocAlert Type="DocAlertType.Info">
			To maintain sorting persistence, ensure to set the <code>@nameof(HxGridColumn<TItem>)&lt;TItem&gt;.@nameof(HxGridColumn<TItem>.Id)</code> properties.
		</DocAlert>
		<Demo Type="typeof(HxGrid_Demo_StatePersisting)" />

	</MainContent>

	<CssVariables>
		<ComponentApiDocCssVariable Name="--hx-grid-button-hover-background" Default="var(--bs-secondary-bg)">
			Grid button background color on hover.
		</ComponentApiDocCssVariable>
		<ComponentApiDocCssVariable Name="--hx-grid-button-border-radius" Default=".25rem">
			Grid button border radius.
		</ComponentApiDocCssVariable>
		<ComponentApiDocCssVariable Name="--hx-grid-sorted-icon-color" Default="var(--bs-primary)">
			Color of the sorted icon.
		</ComponentApiDocCssVariable>
	</CssVariables>
</ComponentApiDoc>

<ComponentApiDoc Type="typeof(HxGridColumn<TItem>)" />
<ComponentApiDoc Type="typeof(HxContextMenuGridColumn<TItem>)" />
<ComponentApiDoc Type="typeof(HxGridEmptyDataTemplateDefaultContent)" />
