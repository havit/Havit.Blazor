<HxFilterForm @ref="filterForm"
			  @bind-Model="@model"
			  @bind-Model:after="HandleModelChanged"
			  OnChipsUpdated="HandleChipsUpdated">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<h2>Filter</h2>

	<HxInputText Label="Text1" @bind-Value="@context.Text1" />
	<HxInputText Label="Text2" @bind-Value="@context.Text2">
		<ChipTemplate>
			Haha! There is also a chip with custom template! (value @context.Text2)
		</ChipTemplate>
	</HxInputText>
	<HxInputNumber Label="Number 1" @bind-Value="@context.Number1" />

	<HxSubmit Text="Apply" Color="ThemeColor.Primary" />

	<h2>Values</h2>

	<h3>Values in filter</h3>
	<ul>
		<li>Text1: @context.Text1</li>
		<li>Text2: @context.Text2</li>
		<li>Number1: @context.Number1</li>
	</ul>
</HxFilterForm>

<h3>Values in model</h3>
<ul>
	<li>Text1: @model.Text1</li>
	<li>Text2: @model.Text2</li>
	<li>Text3: @model.Number1</li>
</ul>

<h4>Chips</h4>

<HxChipList Chips="@chips" OnChipRemoveClick="HandleChipRemoveClick" />

<HxGrid @ref="myGrid" TItem="string" DataProvider="@GridDataProvider">
	<Columns>
		<HxGridColumn TItem="string" HeaderText="Value" ItemTextSelector="(item) => item" />
	</Columns>
</HxGrid>

@code {
	protected FormModel model = new FormModel { Text1 = "initial value" };
	private HxGrid<string> myGrid;
	private HxFilterForm<FormModel> filterForm;
	private ChipItem[] chips;

	private void HandleChipsUpdated(ChipItem[] chips)
	{
		this.chips = chips;
	}

	private async Task HandleChipRemoveClick(ChipItem chipToRemove)
	{
		await filterForm.RemoveChipAsync(chipToRemove);
	}

	private async Task HandleModelChanged()
	{
		await myGrid.RefreshDataAsync();
	}

	private async Task<GridDataProviderResult<string>> GridDataProvider(GridDataProviderRequest<string> request)
	{
		await Task.Delay(3000); // simulate server call

		var stringValues = new List<string>();
		stringValues.Add(model.Text1);
		stringValues.Add(model.Text2);
		stringValues.Add(model.Number1.ToString());
		return request.ApplyTo(stringValues);
	}

	public class FormModel : ICloneable
	{
		[Required, MaxLength(20)]
		public string Text1 { get; set; }

		public string Text2 { get; set; }

		public int Number1 { get; set; } = 5;

		public object Clone() => MemberwiseClone();
	}
}
