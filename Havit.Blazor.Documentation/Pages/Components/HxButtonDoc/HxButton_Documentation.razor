@attribute [Route("/components/" + nameof(HxButton))]
@attribute [Route("/components/" + nameof(HxSubmit))]

<ComponentApiDoc Type="typeof(HxButton)">
	<MainContent>
		<DocHeading Title="Basic usage" />
		<Demo Type="typeof(HxButton_Demo_Basic)" Tabs="false" />

		<p>Several predefined button styles are included, each serving its own semantic purpose, with a few extras thrown in for more control.</p>
		<Demo Type="typeof(HxButton_Demo_Colors)" />

		<DocHeading Title="Outline buttons" />
		<p>You can remove the background with <code>Outline="true"</code>:</p>
		<Demo Type="typeof(HxButton_Demo_Outline)" />

		<DocHeading Title="Sizes" />
		<Demo Type="typeof(HxButton_Demo_Sizes)" Tabs="false" />
		<Demo Type="typeof(HxButton_Demo_Sizes_Small)" Tabs="false" />

		<DocHeading Title="Icons" />
		<p>You can add an icon to the button by using the <code>Icon</code> parameter. The position of the icon can be changed with <code>IconPlacement</code>.</p>
		<Demo Type="typeof(HxButton_Demo_Icons)" />

		<DocHeading Title="Spinners" />
		<p>Button will show a spinner whenever the <code>@nameof(HxButton.OnClick)</code>, <code>@nameof(HxButton.OnValidClick)</code> or <code>@nameof(HxButton.OnInvalidClick)</code> handler returns an incomplete awaitable <code>Task</code>.</p>
		<Demo Type="typeof(HxButton_Demo_BasicSpinner)" Tabs="false" />

		<DocHeading Title="EditForm vs. spinner" Level="3" />
		<DocAlert Type="DocAlertType.Warning">
			Please note that the spinner is not shown when using <code>EditForm.OnSubmit</code>, <code>EditForm.OnValidSubmit</code>, or <code>EditForm.OnInvalidSubmit</code>.
			Use <code>HxSubmit.OnClick</code>, <code>HxSubmit.OnValidClick</code>, or <code>HxSubmit.OnInvalidClick</code> to show the spinner when submitting a form.
		</DocAlert>
		<Demo Type="typeof(HxButton_Demo_OnValidClickWithSpinner)" />

		<DocHeading Title="Manual spinner" Level="3" />
		<p>Alternatively, you can control the spinner manually by setting the <code>@nameof(HxButton.Spinner)</code> parameter:</p>
		<Demo Type="typeof(HxButton_Demo_ManualSpinner)" />

		<DocHeading Title="Single click protection" Id="spinner-and-single-click-protection" />
		<DocAlert Type="DocAlertType.Info">
			If (and only if) there are any <code>OnClick</code> handlers set, the single click protection sets the button to <code>disabled</code> during the callback (usually together with the Spinner).
			It is intentionally not set if there is no <code>OnClick</code> handler, as there might be an <code>OnSubmit</code> handler of the containing <code>EditForm</code>
			set which would have been blocked if the button is disabled (see above).
		</DocAlert>

		<DocHeading Title="Submit outside EditForm" />
		<p>
			There are scenarios where you may want to submit an <code>EditForm</code> from a button located outside the form (e.g., an <code>HxOffcanvas</code> with the form in the body and a button in the footer).
			You can use the <code>HxSubmit</code> or <code>HxButton</code> located outside the <code>EditForm</code> to submit the form.
			<ul>
				<li>Set the same <code>EditContext</code> for both the <code>EditForm</code> and the <code>HxButton</code> or <code>HxSubmit</code>.</li>
				<li>Use the <code>OnValidClick</code> or <code>OnInvalidClick</code> event to handle the form submission.</li>
			</ul>
		</p>
		<Demo Type="typeof(HxButton_Demo_SubmitOutsideEditForm)" />

		<DocHeading Title="Button with a badge" Id="badge" />
		<Demo Type="typeof(HxButton_Demo_Badge)" Tabs="false" />

		<DocHeading Title="Button with a tooltip" Id="tooltip" />
		<p>You can use the <code>Tooltip</code> parameter to set the button's tooltip:</p>
		<Demo Type="typeof(HxButton_Demo_Tooltip)" Tabs="false" />
		<DocHeading Title="Tooltip, wrapper, and CSS classes" Level="3" />
		<DocAlert Type="DocAlertType.Warning">
			<p>
				The <code>&lt;button /&gt;</code> is wrapped with a <code>&lt;span&gt;...&lt;/span&gt;</code> wrapper whenever a <code>Tooltip</code> (or <code>TooltipWrapperCssClass</code>) is set.
				For most scenarios, you will then use <code>TooltipWrapperCssClass</code> for your layout classes no matter there is a chance the tooltip text remains unset (e.g., in dynamic scenarios).
			</p>
			<p>
				The wrapping <code>&lt;span&gt;...&lt;/span&gt;</code> is always decorated with the <code>.d-inline-block</code> class (combined with <code>TooltipWrapperCssClass</code>) to align the behavior with plain <code>.btn</code>.
				Feel free to override the behavior by setting <code>TooltipWrapperCssClass</code> to any other <a href="https://getbootstrap.com/docs/5.3/utilities/display/">display utility class</a> of your choice.
			</p>
			<p>
				Sometimes the wrapping <code>&lt;span&gt;...&lt;/span&gt;</code> breaks the HTML structure anticipated by some Bootstrap components,
				i.e., <a href="/components/HxButtonGroup">button-groups (<code>HxButtonGroup</code>)</a>. Combining button tooltips with button-groups is not supported.
			</p>
		</DocAlert>
		<Demo Type="typeof(HxButton_Demo_TooltipCssClasses)" Tabs="false" />
	</MainContent>
	<CssVariables>
		<ComponentApiDocCssVariable Name="--hx-button-gap" Default=".25rem">
			Space between the text and icon or other content of the button.
		</ComponentApiDocCssVariable>
	</CssVariables>
</ComponentApiDoc>

<ComponentApiDoc Type="typeof(HxSubmit)" />
