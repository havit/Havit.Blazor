@page "/HxMultiSelect_ShowHideDropdown"
@rendermode InteractiveServer
@inject IDemoDataService DemoDataService

<div class="m-3">
	<h3>HxMultiSelect ShowDropdownAsync/HideDropdownAsync Test</h3>

	<div class="mb-3">
		<HxMultiSelect @ref="multiSelectRef"
					   Label="Employees"
					   TItem="EmployeeDto"
					   TValue="int"
					   Data="@employees"
					   @bind-Value="selectedEmployeeIds"
					   TextSelector="@(p => p.Name)"
					   ValueSelector="@(p => p.Id)"
					   NullDataText="Loading employees..."
					   EmptyText="-select employees-" />
	</div>

	<div class="mb-3">
		<HxButton Color="ThemeColor.Primary" OnClick="ShowDropdownAsync">Show Dropdown</HxButton>
		<HxButton Color="ThemeColor.Secondary" OnClick="HideDropdownAsync" CssClass="ms-2">Hide Dropdown</HxButton>
	</div>

	<div class="mb-3">
		<p><strong>Test Instructions:</strong></p>
		<ul>
			<li>Click "Show Dropdown" to programmatically open the dropdown</li>
			<li>Click "Hide Dropdown" to programmatically close the dropdown</li>
			<li>You can also click on the select to open/close normally</li>
		</ul>
	</div>

	<p class="mt-3">Selected employees (IDs): @String.Join(", ", selectedEmployeeIds.Select(e => e.ToString()))</p>
</div>

@code {
	private IEnumerable<EmployeeDto> employees;
	private List<int> selectedEmployeeIds = new();
	private HxMultiSelect<int, EmployeeDto> multiSelectRef;

	protected override async Task OnInitializedAsync()
	{
		employees = await DemoDataService.GetAllEmployeesAsync();
	}

	private async Task ShowDropdownAsync()
	{
		if (multiSelectRef != null)
		{
			await multiSelectRef.ShowDropdownAsync();
		}
	}

	private async Task HideDropdownAsync()
	{
		if (multiSelectRef != null)
		{
			await multiSelectRef.HideDropdownAsync();
		}
	}
}