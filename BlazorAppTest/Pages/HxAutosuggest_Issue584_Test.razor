@page "/HxAutosuggest_Issue584_Test"
@using Havit.Blazor.Documentation.DemoData;
@inject IDemoDataService DemoDataService

<EditForm Model="exampleModel" OnValidSubmit="HandleValidSubmit">
	<HxAutosuggest Label="Employee"
				   Placeholder="Start typing to search by name"
				   TItem="EmployeeDto"
				   TValue="int?"
				   @bind-Value="@exampleModel.SelectedEmployeeId"
				   DataProvider="ProvideSuggestions"
				   MinimumLength="0"
				   ValueSelector="employee => employee.Id"
				   TextSelector="employee => employee.Name"
				   ItemFromValueResolver="ResolveAutosuggestItemFromValue">
		<EmptyTemplate>
			<span class="p-2">Couldn't find any matching employee</span>
		</EmptyTemplate>
	</HxAutosuggest>
	<HxInputTags Label="Tags" @bind-Value="exampleModel.Tags" DataProvider="GetNewItemSuggestions" />
	<p class="mt-3">submitExecuted = @submitExecuted</p>
</EditForm>

@code {
	private ExampleModel exampleModel = new();
	private bool submitExecuted;
	private void HandleValidSubmit()
	{
		submitExecuted = true;
	}

	private Task<InputTagsDataProviderResult> GetNewItemSuggestions(InputTagsDataProviderRequest request)
	{
		return Task.FromResult(new InputTagsDataProviderResult()
			{
				Data = Enum.GetValues<ThemeColor>().Select(v => v.ToString())
			});
	}


	private async Task<AutosuggestDataProviderResult<EmployeeDto>> ProvideSuggestions(AutosuggestDataProviderRequest request)
	{
		var matchingEmployees = await DemoDataService.FindEmployeesByNameAsync(request.UserInput, limitCount: 10, request.CancellationToken);
		return new AutosuggestDataProviderResult<EmployeeDto> { Data = matchingEmployees };
	}

	private async Task<EmployeeDto> ResolveAutosuggestItemFromValue(int? value)
	{
		if (value is null)
		{
			return null;
		}
		return await DemoDataService.GetEmployeeByIdAsync(value.Value);
	}
	private record ExampleModel
	{
		public int? SelectedEmployeeId { get; set; }
		public List<string> Tags { get; set; } = new List<string>() { "Blazor", "C#", "ASP.NET" };
	};
}