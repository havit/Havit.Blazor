@page "/HxInputDateRangeTest"
@namespace System.ComponentModel.DataAnnotations
@using Havit

<div> @* DIV for CSS isolation *@
	<EditForm Model="@model">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<HxInputDateRange Label="HxInputDateRange (default)" CalendarIcon="BootstrapIcon.Calendar" @bind-Value="@model.DateTimeRange" CalendarDateCustomizationProvider="GetCalendarDateCustomization" />
		<HxInputDateRange Label="HxInputDateRange (no DateRanges, no validation)" @bind-Value="@model.DateTimeRange" ShowPredefinedDateRanges="false" ValidationMessageMode="ValidationMessageMode.None" />
		<HxInputDateRange Label="HxInputDateRange (custom DateRanges)" @bind-Value="@model.DateTimeRange" PredefinedDateRanges="@GetPredefinedDateRanges()" />
		<HxInputDateRange Label="HxInputDateRange (disabled)" @bind-Value="@model.DateTimeRange" PredefinedDateRanges="@GetPredefinedDateRanges()" Enabled="false" />

		<button type="submit">Submit</button>
	</EditForm>
</div>

	@code {
		private FormModel model = new FormModel();

		private IEnumerable<InputDateRangePredefinedRangesItem> GetPredefinedDateRanges()
		{
			yield return new InputDateRangePredefinedRangesItem { Label = "Today", DateRange = new DateTimeRange { StartDate = DateTime.Today, EndDate = DateTime.Today } };
			yield return new InputDateRangePredefinedRangesItem { Label = "Whole year", DateRange = new DateTimeRange { StartDate = new DateTime(DateTime.Today.Year, 1, 1), EndDate = new DateTime(DateTime.Today.Year, 12, 31) } };
		}

		private CalendarDateCustomizationResult GetCalendarDateCustomization(CalendarDateCustomizationRequest request)
		{
			return (request.Target == CalendarDateCustomizationTarget.InputDateRangeFrom)
				? new CalendarDateCustomizationResult
				{
					Enabled = request.Date.Day <= 20,
					CssClass = request.Date.Day == 1 ? "green" : ""
				}
				: new CalendarDateCustomizationResult
				{
					Enabled = request.Date.Day >= 10,
					CssClass = request.Date.Day == DateTime.DaysInMonth(request.Date.Year, request.Date.Month) ? "red" : ""
				};
		}


		private class FormModel : IValidatableObject
		{
			public DateTimeRange DateTimeRange { get; set; } = new DateTimeRange
			{
				StartDate = new DateTime(2021, 1, 1),
				EndDate = DateTime.Today
			};

			public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
			{
				if (DateTimeRange.StartDate == null)
				{
					yield return new ValidationResult("Enter start date.", new string[] { nameof(DateTimeRange) });
				}
				else
				{
					if (DateTimeRange.StartDate.Value.Year != 2020)
					{
						yield return new ValidationResult("Start date has to be in 2020.", new string[] { nameof(DateTimeRange) });
					}
				}

				if (DateTimeRange.EndDate == null)
				{
					yield return new ValidationResult("Enter end date.", new string[] { nameof(DateTimeRange) });
				}
				else
				{
					if (DateTimeRange.EndDate.Value.Year != 2021)
					{
						yield return new ValidationResult("End date has to be in 2021.", new string[] { nameof(DateTimeRange) });
					}
				}
			}
		}
	}