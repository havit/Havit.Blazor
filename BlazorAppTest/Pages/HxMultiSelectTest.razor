@page "/HxMultiSelectTest"
@using System.Globalization

<h1>HxCheckboxList</h1>

<HxSwitch Text="Enabled" @bind-Value="@enabled" />

<EditForm Model="@model">
	<HxMultiSelect TItem="CultureInfo" TValue="string" Label="Cultures" EmptyText="-- choose here --" TextSelector="@(item => item.EnglishName)" ValueSelector="@(item => item.EnglishName)" Data="@data" @bind-Value="@model.CultureInfos" NullDataText="Loading languages..." Enabled="@enabled" InputSize="InputSize.Small" />
	<HxMultiSelect TItem="CultureInfo" TValue="string" Label="Cultures" EmptyText="-- choose here --" TextSelector="@(item => item.EnglishName)" ValueSelector="@(item => item.EnglishName)" Data="@data" @bind-Value="@model.CultureInfos" NullDataText="Loading languages..." Enabled="@enabled" />
	<HxMultiSelect TItem="CultureInfo" TValue="string" Label="Cultures" EmptyText="-- choose here --" TextSelector="@(item => item.EnglishName)" ValueSelector="@(item => item.EnglishName)" Data="@data" @bind-Value="@model.CultureInfos" NullDataText="Loading languages..." Enabled="@enabled" InputSize="InputSize.Large" />
</EditForm>

<p>Selected values: @String.Join(", ", model.CultureInfos ?? Enumerable.Empty<string>())</p>

@code
{
	private bool enabled = true;
	private Model model = new Model();
	private List<CultureInfo> data;

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();
		await Task.Delay(3000);

		data = CultureInfo.GetCultures(CultureTypes.SpecificCultures)
		.OrderBy(item => item.EnglishName)
		.Take(100)
		.OrderByDescending(i => i.ToString()) // sorting test
		.ToList();
	}

	private class Model
	{
		public List<string> CultureInfos { get; set; }
	}
}