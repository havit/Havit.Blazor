@page "/HxInputFileTest"

<h1>HxInputFile[Core]</h1>

<HxSwitch Text="Enabled" @bind-Value="@enabled" />

<HxFormState Enabled="@enabled">
	<HxInputFile @ref="hxInputFileComponent"
				 Label="HxInputFile"
				 UploadUrl="/file-upload-streamed/"
				 OnProgress="HandleProgress"
				 OnFileUploaded="HandleFileUploaded"
				 OnUploadCompleted="HandleUploadCompleted"
				 OnChange="@(async (e) => Console.WriteLine("OnChange"))"
				 MaxFileSize="500000"
				 Multiple="true" />

	<HxButton Text="Upload" Color="ThemeColor.Primary" OnClick="HandleUploadClick" CssClass="my-2" />
	<HxButton Text="Clear" OnClick="@(async () => await hxInputFileComponent.ResetAsync())" Color="ThemeColor.Secondary" />

</HxFormState>
<table class="table mt-3">
	<tr>
		<th>FileIndex</th>
		<th>Filename</th>
		<th>Progress</th>
		<th>ContentType</th>
		<th>Size</th>
		<th>LastModified</th>
		<th>ResponseStatus</th>
		<th>ResponseText</th>
	</tr>
	<HxRepeater Data="files">
		<ItemTemplate>
			<tr>
				<td>@context.Key</td>
				<td>@context.Value.Item1?.OriginalFileName</td>
				<td>@context.Value.Item1?.UploadedBytes / @context.Value.Item1?.UploadSize</td>
				<td>@context.Value.Item2?.ContentType</td>
				<td>@context.Value.Item2?.Size</td>
				<td>@context.Value.Item2?.LastModified</td>
				<td>@context.Value.Item2?.ResponseStatus</td>
				<td>@context.Value.Item2?.ResponseText</td>
			</tr>
		</ItemTemplate>
	</HxRepeater>
</table>
<br />
Completed: @uploadCompleted?.TotalSize bytes in @uploadCompleted?.FileCount files


@code
{
	private bool enabled = true;
	private HxInputFile hxInputFileComponent;
	private Dictionary<int, (UploadProgressEventArgs, FileUploadedEventArgs)> files = new Dictionary<int, (UploadProgressEventArgs, FileUploadedEventArgs)>();
	private UploadCompletedEventArgs uploadCompleted;

	private async Task HandleUploadClick()
	{
		files.Clear();

		string accessToken = null;

		// WASM:
		//var accessTokenResult = await AccessTokenProvider.RequestAccessToken();
		//if (accessTokenResult.Status == AccessTokenResultStatus.Success)
		//{
		//	if (accessTokenResult.TryGetToken(out var token))
		//	{
		//		accessToken = token.Value;
		//	}
		//}

		await hxInputFileComponent.StartUploadAsync(accessToken);
	}

	private Task HandleProgress(UploadProgressEventArgs progress)
	{
		(UploadProgressEventArgs, FileUploadedEventArgs) data;
		if (!files.TryGetValue(progress.FileIndex, out data))
		{
			data = (progress, null);
		}
		else
		{
			data = (progress, data.Item2);
		}
		files[progress.FileIndex] = data;

		return Task.CompletedTask;
	}

	private Task HandleFileUploaded(FileUploadedEventArgs fileUploaded)
	{
		(UploadProgressEventArgs, FileUploadedEventArgs) data;
		if (!files.TryGetValue(fileUploaded.FileIndex, out data))
		{
			data = (null, fileUploaded);
			files.Add(fileUploaded.FileIndex, data);
		}
		else
		{
			data = (data.Item1, fileUploaded);
		}
		files[fileUploaded.FileIndex] = data;

		return Task.CompletedTask;
	}

	private Task HandleUploadCompleted(UploadCompletedEventArgs uploadCompleted)
	{
		this.uploadCompleted = uploadCompleted;

		return Task.CompletedTask;
	}
}