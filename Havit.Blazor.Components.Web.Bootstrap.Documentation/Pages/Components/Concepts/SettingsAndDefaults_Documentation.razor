@page "/concepts/settings-and-defaults"
@page "/concepts/settings"
@page "/concepts/defaults"

<h1>Settings and defaults</h1>
<DocAlert Type="DocAlertType.Info">Although most components support the presented functionalities, some components were constructed without settings or defaults because it wouldn't add sufficient value.</DocAlert>

<h2 id="defaults">Defaults</h2>
<p>Defaults are a way to set application-wide settings for components. They can be overriden by the <code>Settings</code> parameter or when setting the parameters directly as described <a href="@($"{NavigationManager.Uri.Split('?').FirstOrDefault()}#overriding")">here</a>.</p>

<SectionTitle Id="defaults-demo">Demo</SectionTitle>
<p>Set defaults from the <code>static</code> property placed on components.</p>
<CodeSnippet Language="cs">HxButton.Defaults.Outline = true;
HxButton.Defaults.Icon = BootstrapIcon.Fullscreen;
</CodeSnippet>

<SectionTitle Id="where-to-set-defaults">Where to set</SectionTitle>
<p>Defaults can be set anywhere from the application, however, usually we want to keep them in the <code>Program.cs</code> or the <code>Startup.cs</code> (for Blazor Server) files.</p>
<CodeSnippet Language="cs">public class Startup
{
	public void ConfigureServices(IServiceCollection services)
	{
		services.AddRazorPages();

		services.AddHxServices();
		services.AddHxMessenger();
		services.AddHxMessageBoxHost();

        // Setting defaults.
        SetHxComponents();
	}

	public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
	{
		...redacted for brevity...
	}

    private static void SetHxComponents()
	{
		HxPlaceholderContainer.Defaults.Animation = PlaceholderAnimation.Glow;
		HxPlaceholder.Defaults.Color = ThemeColor.Light;
		HxButton.Defaults.Size = ButtonSize.Small;
		HxOffcanvas.Defaults.HeaderCssClass = "border-bottom";
		HxOffcanvas.Defaults.FooterCssClass = "border-top";
		HxChipList.Defaults.ChipBadgeSettings.Color = ThemeColor.Light;
		HxChipList.Defaults.ChipBadgeSettings.TextColor = ThemeColor.Dark;
		HxChipList.Defaults.ChipBadgeSettings.CssClass = "p-2 rounded-pill";
		HxOffcanvas.Defaults.BackdropEnabled = false;
	}
}
</CodeSnippet>

<SectionTitle Id="overriding" Title="Overriding" />
<p>When a component decides what value to adhere to it heeds this flow: <strong>parameter > settings > defaults</strong> meaning that when the parameter property is <code>null</code>, then the value is taken from settings, if that is also <code>null</code>, then the value is taken from application-wide defaults. In case all of the above are <code>null</code>, an exception is thrown since this is an unsupported scenario.</p>
<Demo Type="typeof(SettingsAndDefaults_Demo_Overriding)" />

<h2 id="settings">Settings</h2>
<p>Component settings are a way of specifying component parameters. They let you bundle parameters together. That way, component settings can be easily sent across the application and applied in multiple places without the need to send the values individually. This comes in handy for instance when storing user preferences.</p>

<SectionTitle Id="settings-demo">Demo</SectionTitle>
<p>Applying component settings is as easy as instantiating a settings object for the target component and assigning it to the <code>Settings</code> parameter as shown below.</p>
<Demo Type="typeof(SettingsAndDefaults_Demo_Settings)" />

<p>Setting application-wide collection of settings used for varying buttons serving different purposes.</p>
<CodeSnippet Language="cs" File="~\Pages\Components\Concepts\AppButtonSettings.CodeSnippet.cs" />
