@attribute [Route("/components/" + nameof(HxButton))]
@attribute [Route("/components/" + nameof(HxSubmit))]

<ComponentApiDoc Type="typeof(HxButton)">
    <SectionTitle Id="Demo" />
    <Demo Type="typeof(HxButton_Demo_Basic)" Tabs="false" />

    <p>Several predefined button styles are included, each serving its own semantic purpose, with a few extras thrown in for more control.</p>
    <Demo Type="typeof(HxButton_Demo_Colors)" />

    <SectionTitle Id="OutlineButtons" />
    <p>You can remove the background with <code>Outline="true"</code>:</p>
    <Demo Type="typeof(HxButton_Demo_Outline)" />

    <SectionTitle Id="Sizes" />
    <Demo Type="typeof(HxButton_Demo_Sizes)" Tabs="false" />
    <Demo Type="typeof(HxButton_Demo_Sizes_Small)" Tabs="false" />

    <SectionTitle Id="Icons" />
    <p>You can add an icon to the button by using the <code>Icon</code> parameter. The position of the icon can be changed with <code>IconPlacement</code>.</p>
    <Demo Type="typeof(HxButton_Demo_Icons)" />

    <SectionTitle Id="Spinners" />
    <p>Button will show a spinner whenever the <code>OnClick</code> handler returns an incomplete awaitable <code>Task</code>.</p>
    <Demo Type="typeof(HxButton_Demo_BasicSpinner)" Tabs="false" />

    <h4>OnValidClick with spinner</h4>
    <Demo Type="typeof(HxButton_Demo_OnValidClickWithSpinner)" />

    <h4>Manual Spinner</h4>
    <Demo Type="typeof(HxButton_Demo_ManualSpinner)" />

    <h4>Spinner &amp; Single click protection</h4>
    <DocAlert Type="DocAlertType.Warning">
        EditForm's <code>OnSubmit</code> events are not captured for spinner automation. Use HxButton's <code>OnClick</code>, <code>OnValidClick</code> and <code>OnInvalidClick</code> instead.
    </DocAlert>
    <DocAlert Type="DocAlertType.Info">
        If (and only if) there is any of the <code>OnClick</code> handlers set, the single click protection sets the button to <code>disabled</code> during the callback (usually together with the Spinner).
        It is intentionally not set, if there is no <code>OnClick</code> handler, as there might be an <code>OnSubmit</code> handler of the containing <code>EditForm</code>
        set which would have been blocked if the button is disabled (see above).
    </DocAlert>

    <SectionTitle Id="WithBadge">Button with a badge</SectionTitle>
    <Demo Type="typeof(HxButton_Demo_Badge)" Tabs="false" />

    <SectionTitle Id="WithTooltip">Button with a tooltip</SectionTitle>
    <p>You can use <code>Tooltip</code> parameter to set button's tooltip:</p>
    <Demo Type="typeof(HxButton_Demo_Tooltip)" Tabs="false" />
    <h4>Tooltip, wrapper and CSS classes</h4>
    <DocAlert Type="DocAlertType.Warning">
        <p>
            The <code>&lt;button /&gt;</code> is wrapped with a <code>&lt;span&gt;...&lt;/span&gt;</code> wrapper whenever a <code>Tooltip</code> (or <code>TooltipWrapperCssClass</code>) is set.
            For most scenarios you will then use <code>TooltipWrapperCssClass</code> for your layout classes no matter there is a chance the tooltip text remains unset (e.g. in dynamic scenarios).>
        </p>
        <p>
            The wrapping <code>&lt;span&gt;...&lt;/span&gt;</code> is always decorated with <code>.d-inline-block</code> class (combined with <code>TooltipWrapperCssClass</code>) to align the behavior with plain <code>.btn</code>.
            Feel free to override the behavior by setting <code>TooltipWrapperCssClass</code> to any other <a href="https://getbootstrap.com/docs/5.1/utilities/display/">display utility class</a> of your choice.
        </p>
        <p>
            Sometimes the wrapping <code>&lt;span&gt;...&lt;/span&gt;</code> breaks the HTML structure anticipated by some Bootstrap components,
            i.e. <a href="/components/HxButtonGroup">button-groups (<code>HxButtonGroup</code>)</a>. Combining button tooltips with button-groups is not supported.
        </p>
    </DocAlert>
    <Demo Type="typeof(HxButton_Demo_TooltipCssClasses)" Tabs="false" />

</ComponentApiDoc>

<ComponentApiDoc Type="typeof(HxSubmit)" />
