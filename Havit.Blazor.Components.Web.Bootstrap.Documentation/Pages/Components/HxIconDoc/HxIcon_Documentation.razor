@attribute [Route("/components/" + nameof(HxIcon))]

<ComponentApiDoc Type="typeof(HxIcon)">

    <p>(Internally used by <a href="/components/@nameof(HxButton)">@nameof(HxButton)</a> and other components.)</p>

    <SectionTitle Id="Icon" />
    <p>Icon is a class derived from <code>@nameof(IconBase)</code> as we want to allow use of icons from different icon sets.</p>
    <p>Currently, the library brings just one implementation - <code>@nameof(BootstrapIcon)</code>.</p>

    <SectionTitle Title="BootstrapIcon" />
    <p>
        For available icons see <a href="https://icons.getbootstrap.com" target="_blank">Bootstrap Icons <HxIcon Icon="BootstrapIcon.BoxArrowUpRight" /></a>
        or <a href="https://havit.blazor.eu/types/BootstrapIcon">BootstrapIcon</a> members.
    </p>

    <DocAlert>
        Under the hood, the component displays the icon using an <a href="https://icons.getbootstrap.com/#usage" target="_blank">icon font</a>.
    </DocAlert>

    <SectionTitle Title="Basic Usage" Id="basic-usage" />
    <Demo Type="typeof(HxIcon_Demo)" Tabs="false" />

    <SectionTitle Title="Custom Icons" Id="custom-icons" />
    <p><code>HxIcon</code> is a host component which accepts <code>Icon</code> parameter (type of <a href="/types/IconBase"><code>IconBase</code></a>) and passes the rendering to a specific icon-component retrieved from the settings.</p>
    <p>You can add your own icons by following these steps:</p>
    <ol>
        <li>
            <p>Create a new class derived from <code>IconBase</code> which represents settings for your new type of icon</p>
            <CodeSnippet File="~\Pages\Components\HxIconDoc\MyCustomIcon.CodeSnippet.cs" />
            <ul>
                <li><code>RenderComponentType</code> property returns the rendering component for your icon (see bellow),</li>
                <li>add any properties which you need to parametrize your render-component to render the specific icon from the set (<code>IconCharacter</code> in our sample),</li>
                <li>add static properties returning instances with the settings of each icon.</li>
            </ul>
        </li>
        <li>
            <p>Create a new component which renders your icon</p>
            <CodeSnippet File="~\Pages\Components\HxIconDoc\MyCustomIconRenderer.CodeSnippet.razor" />
            <p>It can be more or less any component that receives the following parameters from <code>HxIcon</code>:</p>
            <ul>
                <li><code>Icon</code> which allows you to distinguish between icons (it can include the name of CSS class used for the icon, the URL of an image, unicode character, or anything else),</li>
                <li><code>CssClass</code> which allows you to apply any additional CSS classes from the <code>HxIcon.CssClass</code> (usually used for positioning, sizing, margins, etc.),</li>
                <li>additional parameters for <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/#attribute-splatting-and-arbitrary-parameters">attribute splatting</a> (<code>[Parameter(CaptureUnmatchedValues = true)]</code>)</li>
            </ul>
        </li>
        <li>
            <p>You can use your new icons with <code>HxIcon</code> now (and everywhere else where the <code>Icon</code> parameter(s) can be set):</p>
            <Demo Type="typeof(HxIcon_Demo_CustomIcons)" Tabs="false" />
        </li>
    </ol>

</ComponentApiDoc>