@page "/components/HxScrollspy"

<ComponentApiDoc Type="typeof(HxScrollspy)">

	<h2 id="HowItWorks">How it works</h2>
	<p>
		Scrollspy needs two components to work together. The <code>HxScrollspy</code> component to wrap
		the area to spy on and the <a href="/components/@nameof(HxNav)"><code>@nameof(HxNav)</code></a> or a list-group (with <code><a href="/components/@nameof(HxScrollspyNavLink)">@nameof(HxScrollspyNavLink)</a>s</code>) to represent the navigation.
		These have to be associated using <code>HxScrollspy.TargetId</code> parameter.
		For more details see also <a href="https://getbootstrap.com/docs/5.1/components/scrollspy">Bootstrap documentation</a>.
	</p>

	<p>The scrollspy navigation has to use custom <code>HxScrollspyNavLink</code> to workaround the <code>&lt;base&gt;</code> Blazor requirement and inability of Bootstrap to interpret the <code>page#fragment</code> form of link.</p>

	<p>For anchor-fragment navigation (<code>&lt;a href="#id"&gt;</code>) to work the page have to host <a href="/components/HxAnchorFragmentNavigation">HxAnchorFragmentNavigation</a> component.</p>

	<div class="alert alert-warning" role="alert">
		Current component design expects the scrollspy to by used in <b>dedicated scrollable container</b>
		(such as <code>&lt;div&gt;</code> or <a href="/components/HxOffcanvas">HxOffcanvas</a>).<br />
		For full-page scrollspy, the spying has to be attached directly to <code>&lt;body&gt;</code> (will be implemented later as needed?).
	</div>

	<SectionTitle Id="StaticContentHxNavNavigation">Static content with <code>HxNav</code> navigation</SectionTitle>
	<Demo Type="typeof(HxScrollspy_Demo_HxNav)" />

	<SectionTitle Id="StaticContentListGroupNavigation">Static content with list-group navigation</SectionTitle>
	<Demo Type="typeof(HxScrollspy_Demo_ListGroup)" />

	<SectionTitle Id="DynamicContent">Dynamic content (async loaded data)</SectionTitle>
	<DocAlert Type="DocAlertType.Warning">
		<p>
			Bootstrap scrollspy calculates offsets of individual sections when activated (i.e. <code>OnAfterRenderAsync</code> within first render). If the content changes dynamicaly,
			you have to refresh the offsets manually by calling <code>HxScrollspy.RefreshAsync()</code>.
		</p>
		<p>
			Simmilar issue applies for fragment-navigation. You have to postpone the initial fragment navigation to happen after the data gets loaded and the UI renders the final version
			(by setting <code>&lt;HxAnchorFragmentNavigation Automation="HxAnchorFragmentNavigation.SamePage"&gt;</code>
			and calling <code>HxAnchorFragmentNavigation.ScrollToCurrentUriFragmentAsync()</code>).
		</p>
		<p>Consider using <i>placeholders</i> to fix the UI layout while loading.</p>
	</DocAlert>
	<Demo Type="typeof(HxScrollspy_Demo_DynamicContent)" />

	<SectionTitle Id="CustomNavigationContent">Custom navigation content</SectionTitle>
	<DocAlert>
		When using <code>HxButton</code> inside <code>HxScrollspyNavLink</code>, be sure to set s <code>OnClickStopPropagation = "true"</code>.
		If you won't, the application will navigate to <code>/#anchor</code> of the <code>HxScrollspyNavLink</code> after <code>OnClick</code> handler completes.
	</DocAlert>
	<Demo Type="typeof(HxScrollspy_Demo_CustomNavigationContent)" />
</ComponentApiDoc>

<ComponentApiDoc Type="typeof(HxScrollspyNavLink)" />
