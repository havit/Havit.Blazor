using System.Text;
using Havit.SourceGenerators.StrongApiStringLocalizers.Model;

namespace Havit.SourceGenerators.StrongApiStringLocalizers.SourceBuilders;

/// <summary>
/// Generated source code for localizer implementation.
/// </summary>
internal class LocalizerImplementationSourceBuilder
{
	private readonly ResourceData _resxBuildData;

	public LocalizerImplementationSourceBuilder(ResourceData resxBuildData)
	{
		_resxBuildData = resxBuildData;
	}

	public string BuildSource()
	{
		var builder = new StringBuilder();
		builder.AppendAutoGeneratedDocumenationCommentLine();
		builder.AppendLine();
		builder.AppendLine($"namespace {_resxBuildData.TargetLocalizerNamespace};");
		builder.AppendLine();
		builder.AppendLine("using System.CodeDom.Compiler;");
		builder.AppendLine("using System.Collections.Generic;");
		builder.AppendLine("using Microsoft.Extensions.Localization;");
		builder.AppendLine();
		builder.AppendGeneratedCodeAttributeLine();
		builder.AppendLine($"public class {_resxBuildData.LocalizerImplementationClassName} : {_resxBuildData.LocalizerInterfaceName}");
		builder.AppendLine("{");

		builder.AppendLine("\tprivate readonly IStringLocalizer _localizer;");
		builder.AppendLine();

		// constructor
		builder.AppendLine($"\tpublic {_resxBuildData.LocalizerImplementationClassName}(IStringLocalizerFactory stringLocalizerFactory)");
		builder.AppendLine("\t{");
		builder.AppendLine($"\t\t_localizer = stringLocalizerFactory.Create(\"{(_resxBuildData.ResourceNamespace + "." + _resxBuildData.ResourceName).Trim('.')}\", \"{_resxBuildData.AssemblyName}\");");
		builder.AppendLine("\t}");
		builder.AppendLine();

		// properties
		foreach (var property in _resxBuildData.Properties)
		{
			builder.AppendSummaryCommentLine(property.Comment);
			builder.AppendLine($"\tpublic LocalizedString {property.Name} => _localizer[\"{property.Name}\"];");
			builder.AppendLine();
		}

		// IStringLocalizer
		builder.AppendLine("\tLocalizedString IStringLocalizer.this[string name] => _localizer[name];");
		builder.AppendLine("\tLocalizedString IStringLocalizer.this[string name, params object[] arguments] => _localizer[name, arguments];");
		builder.AppendLine("\tIEnumerable<LocalizedString> IStringLocalizer.GetAllStrings(bool includeParentCultures) => _localizer.GetAllStrings(includeParentCultures);");
		builder.AppendLine("}");

		return builder.ToString();
	}
}
