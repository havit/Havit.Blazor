namespace Havit.Blazor.Components.Web.Bootstrap
{
	/// <summary>
	/// Sidebar component - responsive navigation sidebar.<br />
	/// Full documentation and demos: <see href="https://havit.blazor.eu/components/HxSidebar">https://havit.blazor.eu/components/HxSidebar</see>
	/// </summary>
	public partial class HxSidebar : ComponentBase
	{
		/// <summary>
		/// Sidebar header.
		/// </summary>
		[Parameter] public RenderFragment HeaderTemplate { get; set; }

		/// <summary>
		/// Sidebar items. Use <see cref="HxSidebarItem"/>.
		/// </summary>
		[Parameter] public RenderFragment ItemsTemplate { get; set; }

		/// <summary>
		/// Icon for expanding the desktop version.
		/// </summary>
		[Parameter] public IconBase ExpandIcon { get; set; } = BootstrapIcon.ChevronBarRight;

		/// <summary>
		/// Icon for collapsing the desktop version.
		/// </summary>
		[Parameter] public IconBase CollapseIcon { get; set; } = BootstrapIcon.ChevronBarLeft;

		/// <summary>
		/// Sidebar footer (e.g. logged user, language switch, ...).
		/// </summary>
		[Parameter] public RenderFragment FooterTemplate { get; set; }

		/// <summary>
		/// Additional CSS class.
		/// </summary>
		[Parameter] public string CssClass { get; set; }

		/// <summary>
		/// ID of the root sidebar HTML element.
		/// (Autogenerated if not set.)
		/// </summary>
		[Parameter] public string Id { get; set; } = "hx-" + Guid.NewGuid().ToString("N");

		/// <summary>
		/// Indicates whether the <see cref="HxSidebar"/> is collapsed, can be used to alter the state (expand or collapse the sidebar).
		/// </summary>
		[Parameter] public bool Collapsed { get; set; } = false;
		/// <summary>
		/// Fires when the sidebar is expanded or collapsed.
		/// </summary>
		[Parameter] public EventCallback<bool> CollapsedChanged { get; set; }
		/// <summary>
		/// Triggers the <see cref="CollapsedChanged"/> event. Allows interception of the event in derived components.
		/// </summary>
		protected virtual Task InvokeCollapsedChangedAsync(bool collapsed) => CollapsedChanged.InvokeAsync(collapsed);

		protected internal string NavContentElementId => Id + "-nav-content";


		private string GetCollapsedCssClass() => Collapsed ? "collapsed" : null;

		private async Task HandleCollapseToggleClick()
		{
			Collapsed = !Collapsed;
			await InvokeCollapsedChangedAsync(Collapsed);
		}
	}
}
