@namespace Havit.Blazor.Components.Web.Bootstrap
<CascadingValue Value="this" IsFixed="true">
	<div class="@CssClassHelper.Combine(HighlightOnActiveChild ? "hx-sidebar-item-highlight-on-active-child" : null)">
		@if (!HasExpandableContent)
		{
			<HxTooltip @key="@(GetHashCode() + ParentSidebar.Collapsed.ToString())"
					   WrapperCssClass="@(ParentSidebar.Collapsed ? "d-block" : null)"
					   Placement="TooltipPlacement.Right"
					   Trigger="TooltipTrigger.Hover"
					   Text="@(ParentSidebar.Collapsed ? TooltipText : null)">

				<HxNavLink Href="@Href"
						   CssClass="@CssClassHelper.Combine(DropdownContainer is not null ? "dropdown-item" : null, CssClass, "position-relative")"
						   Match="Match"
						   Enabled="Enabled">

					@* To hide the nav-content in mobile view *@
					<div data-bs-toggle="collapse" data-bs-target="#@ParentSidebar.NavContentElementId" class="stretched-link">
						<div class="hx-sidebar-item-navlink-content">
							@if (Icon is not null)
							{
								<HxIcon CssClass="hx-sidebar-item-icon" Icon="Icon" />
							}

							<span class="hx-sidebar-item-navlink-content-inner">
								@if (ContentTemplate is not null)
								{
									@ContentTemplate(new() { ItemExpanded = null })
								}
								@Text
							</span>
						</div>

					</div>
				</HxNavLink>
			</HxTooltip>
		}
		else
		{
			RenderFragment itemNavLinkContent =
		@<div class="hx-sidebar-item-navlink-content">
			@if (Icon is not null)
			{
			<HxIcon CssClass="hx-sidebar-item-icon" Icon="Icon" />
			}

			<span class="hx-sidebar-item-navlink-content-inner">
				@if (ContentTemplate is not null)
				{
					@ContentTemplate(new() { ItemExpanded = expanded })
				}
				@Text
			</span>

			<HxIcon Icon="@BootstrapIcon.ChevronRight" CssClass="expand-icon" />
		</div>;

			@if (ParentSidebar.Collapsed)
			{
				<HxDropdown Direction="DropdownDirection.End" CssClass="hx-sidebar-item">
					<HxNavLink Href="@Href"
							   CssClass="this.CssClass"
							   Match="Match"
							   Enabled="Enabled"
							   role="button"
							   data-bs-offset="0,0"
							   onmouseenter="bootstrap.Dropdown.getOrCreateInstance(event.target).show()"
							   onmouseleave="bootstrap.Dropdown.getInstance(event.target)?.hide()"
							   aria-expanded="@(expanded ? "true" : "false")">

						@itemNavLinkContent

						<HxDropdownMenu CssClass="hx-sidebar-subitems">
							@ChildContent
						</HxDropdownMenu>

					</HxNavLink>
				</HxDropdown>
			}
			else
			{
				<HxNavLink Href="@Href"
						   CssClass="@CssClassHelper.Combine(CssClass, "hx-sidebar-item")"
						   Match="Match"
						   Enabled="Enabled"
						   OnClick="HandleExpandableItemClick"
						   role="button"
						   data-bs-toggle="collapse"
						   data-bs-target="@("#" + _id)"
						   aria-expanded="@(expanded ? "true" : "false")">

					@itemNavLinkContent

				</HxNavLink>

				<HxCollapse Id="@_id"
							Parent="@(ParentSidebar.MultipleItemsExpansion ? null : $"#{ParentSidebar._navId}")"
							@ref="collapseComponent"
							CssClass="hx-sidebar-subitems"
							InitiallyExpanded="expanded"
							OnShown="HandleCollapseShown"
							OnHidden="HandleCollapseHidden">
					<nav class="nav hx-sidebar-collapsed-nav">
						@ChildContent
					</nav>
				</HxCollapse>
			}
		}
	</div>
</CascadingValue>