@namespace Havit.Blazor.Components.Web.Bootstrap.Internal
@typeparam TValue
@typeparam TItem

@{
	bool enabled = EnabledEffective && (ItemsToRender != null);
}
<div class="@CssClassHelper.Combine("hx-multi-select",
									HasInputGroups ? "input-group" : null,
                                    HasInputGroupEnd ? "input-group-end" : null,
					                HasInputGroupStart ? "input-group-start" : null,
                                    InputGroupCssClass)">
	@if (InputGroupStartText is not null)
	{
		<span class="input-group-text">@InputGroupStartText</span>
	}

	@InputGroupStartTemplate
	<div @ref="_elementReference"
		 class="@CssClassHelper.Combine("dropdown", (LabelTypeEffective == LabelType.Floating) ? "form-floating": null)"
		 role="listbox">

		<input @ref="_inputElementReference"
			   type="text"
			   id="@InputId"
			   class="@InputCssClass"
			   value="@(((ItemsToRender == null) && !String.IsNullOrEmpty(NullDataText)) ? NullDataText : InputText)"
			   disabled="@(!enabled)"
			   readonly="true"
			   aria-expanded="@_isShown"
			   data-bs-toggle="@(enabled ? "dropdown" : null)"
			   data-bs-auto-close="outside"
			   @attributes="this.AdditionalAttributes" />

		@if (LabelTypeEffective == LabelType.Floating)
		{
			<HxFormValueComponentRenderer_Label FormValueComponent="@FormValueComponent" />
		}

		@* Must be always rendered otherwise does not work after disable->enabled scenario *@
		<ul class="@CssClassHelper.Combine("dropdown-menu", _isShown ? "show" : null)">
			@if (enabled)
			{
				if (AllowFiltering)
				{
					<li>
						<div class="hx-multi-select-filter-input-wrapper">
							<input @ref="_filterInputReference"
								   id="@($"{InputId}_filter")"
								   type="text"
								   class="@CssClassHelper.Combine("form-control", InputSizeEffective.AsFormControlCssClass())"
								   autocomplete="off"
								   spellcheck="false"
								   value="@_filterText"
								   @oninput="HandleFilterInputChanged"
								   @onclick:stopPropagation
								   onfocusin="this.select()" />

							<div class="hx-multi-select-filter-input-icon">
								@if (string.IsNullOrEmpty(_filterText))
								{
									<HxIcon CssClass="hx-multi-select-filter-input-icon-search" Icon="@FilterSearchIcon" />
								}
								else
								{
									<div role="button" @onclick="HandleClearIconClick" @onclick:stopPropagation>
										<HxIcon CssClass="hx-multi-select-filter-input-icon-clear" Icon="@FilterClearIcon" />
									</div>
								}
							</div>
						</div>
					</li>
				}

				var filteredItems = GetFilteredItems();
				if (filteredItems.Count <= 0)
				{
					<li>
						@if (FilterEmptyResultTemplate is not null)
						{
							@FilterEmptyResultTemplate
						}
						else
						{
							<span class="p-2">@GetFilterEmptyResultText()</span>
						}
					</li>
				}
				else
				{
					if (AllowSelectAll)
					{
						<li>
							<button type="button" class="dropdown-item" role="option" @onclick="HandleSelectAllClickedAsync">
								<div class="form-check">
									<input class="form-check-input" type="checkbox" id="@($"{InputId}_selectall")" checked="@_selectAllChecked" tabindex="-1" />
									<label class="form-check-label" for="@($"{InputId}_selectall")" @onclick:preventDefault>
										@(GetSelectAllText())
									</label>
								</div>
							</button>
						</li>
					}

					for (var i = 0; i < filteredItems.Count; i++)
					{
						string checkboxElementId = InputId + "_" + i.ToString();

						var item = filteredItems[i];
						TValue value = SelectorHelpers.GetValue<TItem, TValue>(ValueSelector, item);

						bool itemSelected = _currentSelectedValues.Contains(value);

						<li>
							<button type="button" class="dropdown-item" role="option" @onclick="async () => await HandleItemSelectionChangedAsync(!itemSelected, item)">
								<div class="form-check">
									<input class="form-check-input" type="checkbox" id="@checkboxElementId" checked="@itemSelected" tabindex="-1" />
									<label class="form-check-label" for="@checkboxElementId" @onclick:preventDefault>
										@SelectorHelpers.GetText(TextSelector, item)
									</label>
								</div>
							</button>
						</li>
					}
				}
			}
		</ul>
	</div>
	@InputGroupEndTemplate

	@if (InputGroupEndText is not null)
	{
		<span class="input-group-text">@InputGroupEndText</span>
	}
</div>