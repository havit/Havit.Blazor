@namespace Havit.Blazor.Components.Web.Bootstrap.Internal
@inherits Microsoft.AspNetCore.Components.Forms.InputBase<DateTimeRange>

@if ((FieldIdentifier.Model != null) && (_fromFieldIdentifier.Model != null) && (_toFieldIdentifier.Model != null))
{
	bool fromValid = !EditContext.GetValidationMessages(FieldIdentifier).Any() && !EditContext.GetValidationMessages(_fromFieldIdentifier).Any();
	bool toValid = !EditContext.GetValidationMessages(FieldIdentifier).Any() && !EditContext.GetValidationMessages(_toFieldIdentifier).Any();

	<div class="@CssClassHelper.Combine("hx-input-date-range", (CalendarIconEffective is not null) ? "hx-input-date-has-calendar-icon" : null)">
		<div class="input-group flex-nowrap">
			<HxDropdown AutoClose="DropdownAutoClose.Outside">
				@*Input must not be rendered when bootstrap dropdown is opened. Therefore we add is-invalid class via IJSRuntime. *@
				<HxDropdownToggleElement @ref="_fromDropdownToggleElement"
										 ElementName="input"
										 type="text"
										 CssClass="@CssClassHelper.Combine(InputCssClass,
                                                                        ((IInputWithSize)this).GetInputSizeCssClass(),
                                                                        fromValid ? null : HxInputBase<object>.InvalidCssClass,
                                                                        "rounded-end-0")"
										 Caret="false"
										 Value="@(_fromPreviousParsingAttemptFailed ? _incomingFromValueBeforeParsing : FormatDate(Value.StartDate))"
										 ValueChanged="HandleFromChanged"
										 placeholder="@(FromPlaceholderEffective ?? StringLocalizerFactory.GetLocalizedValue("From", typeof(HxInputDateRange)))"
										 disabled="@(!EnabledEffective)"
										 onfocus="this.select();"
										 inputmode="none"
										 @attributes="this.AdditionalAttributes" />

				<HxDropdownContent CssClass="hx-input-date-range-dropdown-menu">
					@if (EnabledEffective)
					{
						<div class="hx-input-date-range-calendar">
							<HxCalendar Value="@Value.StartDate" ValueChanged="HandleFromCalendarValueChangedAsync" MinDate="@MinDateEffective" MaxDate="@MaxDateEffective" DateCustomizationProvider="GetCalendarDateCustomizationFrom" KeyboardNavigation="false" DisplayMonth="@GetFromCalendarDisplayMonthEffective" TimeProvider="TimeProviderEffective" />
						</div>
						<div class="hx-input-date-range-buttons">
							@if (ShowClearButtonEffective)
							{
								<HxButton Text="@StringLocalizerFactory.GetLocalizedValue("Clear", typeof(HxInputDateRange))"
										  Color="ThemeColor.Link"
										  Size="ButtonSize.Small"
										  OnClick="HandleFromClearClickAsync"
										  tabindex="-1"
										  Enabled="this.EnabledEffective" />
							}
							@if (ShowPredefinedDateRangesEffective && (PredefinedDateRangesEffective != null) && PredefinedDateRangesEffective.Any())
							{
								@foreach (var item in PredefinedDateRangesEffective)
								{
									<HxButton @key="@item"
											  Text="@StringLocalizerFactory.GetLocalizedValue(item.Label, item.ResourceType)"
											  Color="ThemeColor.Link"
											  Size="ButtonSize.Small"
											  OnClick="() => HandleDateRangeClick(item.DateRange, _fromDropdownToggleElement)"
											  tabindex="-1"
											  Enabled="this.EnabledEffective" />
								}
							}
						</div>
					}
				</HxDropdownContent>
				@if (CalendarIconEffective is not null)
				{
					<div @ref="_fromIconWrapperElement" class="hx-input-date-icon">
						<HxIcon Icon="CalendarIconEffective" />
					</div>
				}
			</HxDropdown>

			<HxDropdown AutoClose="DropdownAutoClose.Outside">
				@*Input must not be rendered when bootstrap dropdown is opened. Therefore we add is-invalid class via IJSRuntime. *@
				<HxDropdownToggleElement @ref="_toDropdownToggleElement"
										 ElementName="input"
										 type="text"
										 CssClass="@CssClassHelper.Combine(InputCssClass,
                                                                        ((IInputWithSize)this).GetInputSizeCssClass(),
                                                                        toValid ? null : HxInputBase<object>.InvalidCssClass,
                                                                        "rounded-start-0")"
										 Value="@(_toPreviousParsingAttemptFailed ? _incomingToValueBeforeParsing : FormatDate(Value.EndDate))"
										 ValueChanged="HandleToChanged"
										 placeholder="@(ToPlaceholderEffective ?? StringLocalizerFactory.GetLocalizedValue("To", typeof(HxInputDateRange)))"
										 disabled="@(!EnabledEffective)"
										 onfocus="this.select()"
										 inputmode="none"
										 @attributes="this.AdditionalAttributes" />

				<HxDropdownContent CssClass="hx-input-date-range-dropdown-menu">
					@if (EnabledEffective)
					{
						<div class="hx-input-date-range-calendar">
							<HxCalendar Value="@Value.EndDate" ValueChanged="HandleToCalendarValueChanged" MinDate="@MinDateEffective" MaxDate="@MaxDateEffective" DateCustomizationProvider="GetCalendarDateCustomizationTo" KeyboardNavigation="false" DisplayMonth="@GetToCalendarDisplayMonthEffective" TimeProvider="TimeProviderEffective" />
						</div>
						<div class="hx-input-date-range-buttons">
							@if (ShowClearButtonEffective)
							{
								<HxButton Text="@StringLocalizerFactory.GetLocalizedValue("Clear", typeof(HxInputDateRange))"
										  Color="ThemeColor.Link"
										  Size="ButtonSize.Small"
										  OnClick="HandleToClearClickAsync"
										  tabindex="-1"
										  Enabled="this.EnabledEffective" />
							}
							@if (ShowPredefinedDateRangesEffective && (PredefinedDateRangesEffective != null) && PredefinedDateRangesEffective.Any())
							{
								@foreach (var item in PredefinedDateRangesEffective)
								{
									<HxButton @key="@item"
											  Text="@StringLocalizerFactory.GetLocalizedValue(item.Label, item.ResourceType)"
											  Color="ThemeColor.Link"
											  Size="ButtonSize.Small"
											  OnClick="() => HandleDateRangeClick(item.DateRange, _toDropdownToggleElement)"
											  tabindex="-1"
											  Enabled="this.EnabledEffective" />
								}
							}
						</div>
					}
				</HxDropdownContent>
				@if (CalendarIconEffective is not null)
				{
					<div @ref="_toIconWrapperElement" class="hx-input-date-icon">
						<HxIcon Icon="CalendarIconEffective" />
					</div>
				}
			</HxDropdown>
		</div>

		<HxValidationMessage TValue="DateTimeRange" ForFieldNames="@_validationFieldNames" Mode="@ValidationMessageModeEffective" />
	</div>
}