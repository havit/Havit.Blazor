@namespace Havit.Blazor.Components.Web.Bootstrap.Internal
@inherits Microsoft.AspNetCore.Components.Forms.InputBase<DateTimeRange>

@if ((FieldIdentifier.Model != null) && (fromFieldIdentifier.Model != null) && (toFieldIdentifier.Model != null))
{
    bool fromValid = !EditContext.GetValidationMessages(FieldIdentifier).Any() && !EditContext.GetValidationMessages(fromFieldIdentifier).Any();
	bool toValid = !EditContext.GetValidationMessages(FieldIdentifier).Any() && !EditContext.GetValidationMessages(toFieldIdentifier).Any();

    <div> @* root div element ensures Blazor CSS isolation works well *@
        <HxDropdown CssClass="@CssClassHelper.Combine("hx-input-date-range input-group", (ShowPredefinedDateRangesEffective && (PredefinedDateRangesEffective?.Any() ?? false)) ? "hx-input-date-range-predefined-ranges" : null)" AutoClose="DropdownAutoClose.Outside">

            <HxDropdownToggleElement
                @ref="fromHxDropdownToggleElement"
                ElementName="input"
                type="text"
                id="@FromInputId"
                CssClass="@CssClassHelper.Combine(this.InputCssClass,
                    fromValid ? null : InvalidCssClass,
                    ((IInputWithSize)this).GetInputSizeCssClass())"
                value="@FormatDate(Value.StartDate)"
                placeholder="@StringLocalizerFactory.GetLocalizedValue("From", typeof(HxInputDateRange))"
                @onchange="HandleFromChanged"
                @onfocus="HandleFromFocusAsync"
                disabled="@(!EnabledEffective)"
                @attributes="this.AdditionalAttributes" />

            @if (EnabledEffective)
            {
                <HxDropdownContent CssClass="hx-input-date-range-dropdown dropdown-menu">
                    <div class="hx-input-date-range-calendar">
                        <HxCalendar Value="@Value.StartDate" ValueChanged="HandleFromCalendarValueChangedAsync" MinDate="@MinDateEffective" MaxDate="@MaxDateEffective" DateCustomizationProvider="GetCalendarDateCustomizationFrom" KeyboardNavigation="false" />
                    </div>
                    @if (ShowCalendarButtonsEffective)
                    {
                        <div class="hx-input-date-range-buttons">
                            <HxButton Text="@StringLocalizerFactory.GetLocalizedValue("Clear", typeof(HxInputDateRange))" Color="ThemeColor.Link" Size="ButtonSize.Small" OnClick="HandleFromClearClickAsync" tabindex="-1" />
                            <HxButton Text="@StringLocalizerFactory.GetLocalizedValue("OK", typeof(HxInputDateRange))" Color="ThemeColor.Primary" Size="ButtonSize.Small" OnClick="HandleFromOKClickAsync" tabindex="-1" />
                        </div>
                    }
                </HxDropdownContent>
            }

            @*Input must not be rendered when bootstrap dropdown is opened. Therefore we add is-invalid class via IJSRuntime. *@
            <HxDropdownToggleElement @ref="toHxDropdownToggleElement"
                                 ElementName="input"
                                 type="text"
               CssClass="@CssClassHelper.Combine(this.InputCssClass,
                    toValid ? null : InvalidCssClass,
                    ((IInputWithSize)this).GetInputSizeCssClass())"
               value="@FormatDate(Value.EndDate)"
               placeholder="@StringLocalizerFactory.GetLocalizedValue("To", typeof(HxInputDateRange))"
               @onchange="HandleToChanged"
               @onfocus="HandleToFocusAsync"
               disabled="@(!EnabledEffective)"
               @attributes="this.AdditionalAttributes" />

            @if (EnabledEffective)
            {
                <HxDropdownContent CssClass="hx-input-date-range-dropdown dropdown-menu">
                    <div class="hx-input-date-range-calendar">
                        <HxCalendar Value="@Value.EndDate" ValueChanged="HandleToCalendarValueChanged" MinDate="@MinDateEffective" MaxDate="@MaxDateEffective" DateCustomizationProvider="GetCalendarDateCustomizationTo" KeyboardNavigation="false" />
                    </div>
                    @if (ShowCalendarButtonsEffective)
                    {
                        <div class="hx-input-date-range-buttons">
                            <HxButton Text="@StringLocalizerFactory.GetLocalizedValue("Clear", typeof(HxInputDateRange))" Color="ThemeColor.Link" Size="ButtonSize.Small" OnClick="HandleToClearClickAsync" tabindex="-1" />
                            <HxButton Text="@StringLocalizerFactory.GetLocalizedValue("OK", typeof(HxInputDateRange))" Color="ThemeColor.Primary" Size="ButtonSize.Small" OnClick="HandleToOKClickAsync" tabindex="-1" />
                        </div>
                    }
                </HxDropdownContent>
            }

            @if (ShowValidationMessage)
            {
                <HxValidationMessage TValue="DateTimeRange" ForFieldNames="@validationFieldNames" />
            }

            @if (ShowPredefinedDateRangesEffective && (PredefinedDateRangesEffective != null) && PredefinedDateRangesEffective.Any())
            {
                <button class="btn btn-light" type="button" data-bs-toggle="dropdown" disabled="@(!EnabledEffective)" tabindex="-1">
                    <HxIcon Icon="@BootstrapIcon.ThreeDotsVertical" />
                </button>
                @if (EnabledEffective)
                {
                    <ul class="dropdown-menu dropdown-menu-end">
                        @foreach (var item in PredefinedDateRangesEffective)
                        {
                            <li><span class="dropdown-item" role="button" @onclick="() => HandleDateRangeClick(item.DateRange)" @onclick:stopPropagation>@StringLocalizerFactory.GetLocalizedValue(item.Label, item.ResourceType)</span></li>
                        }
                    </ul>
                }
            }
        </HxDropdown>
    </div>
}