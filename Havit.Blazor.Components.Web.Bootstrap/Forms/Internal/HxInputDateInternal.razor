@namespace Havit.Blazor.Components.Web.Bootstrap.Internal
@typeparam TValue
@inherits Microsoft.AspNetCore.Components.Forms.InputBase<TValue>

@if (FieldIdentifier.Model != null)
{
    <div> @* root div element ensures Blazor CSS isolation works well *@
        <HxDropdown CssClass="@CssClassHelper.Combine(
					     "hx-input-date input-group",
					     ((IInputWithSize)this).GetInputGroupSizeCssClass(),
                         InputSizeEffective.AsInputGroupCssClass(),
					     (this.CalendarIconEffective is not null) ? "hx-input-date-has-calendar-icon" : null,
					     (LabelTypeEffective == LabelType.Floating) ? "form-floating" : null,
					     (ShowPredefinedDatesEffective && (PredefinedDatesEffective?.Any() ?? false)) ? "hx-input-date-predefined-dates" : null,
					     InputGroupCssClass)"
                    AutoClose="DropdownAutoClose.Outside">

            @if (InputGroupStartText is not null)
            {
                <span class="input-group-text">@InputGroupStartText</span>
            }

            @InputGroupStartTemplate

            <HxDropdownToggleElement
                @ref="hxDropdownToggleElement"
                ElementName="input"
                CssClass="@CssClassHelper.Combine(InputCssClass, ((IInputWithSize)this).GetInputSizeCssClass(), HasEndInputGroupEffective ? "hx-input-date-no-right-border" : null)"
                type="text"
                id="@InputId"
                value="@CurrentValueAsString" @onchange="HandleValueChanged"
                placeholder="@Placeholder"
                disabled="@(!EnabledEffective)"
                @attributes="AdditionalAttributes" />

            @InputGroupEndTemplate

            @if (InputGroupEndText is not null)
            {
                <span class="@CssClassHelper.Combine("input-group-text", RenderPredefinedDates ? null : " rounded-end")">@InputGroupEndText</span>
            }

            @if (LabelTypeEffective == Havit.Blazor.Components.Web.Bootstrap.LabelType.Floating)
            {
                <HxFormValueComponentRenderer_Label FormValueComponent="@FormValueComponent" />
            }

            @if (EnabledEffective)
            {
                <HxDropdownContent CssClass="hx-input-date-dropdown">
                    <div class="hx-input-date-calendar">
                        <HxCalendar Value="@GetDateTimeFromValue(Value)" ValueChanged="HandleCalendarValueChangedAsync" MinDate="@MinDateEffective" MaxDate="@MaxDateEffective" DateCustomizationProvider="GetCalendarDateCustomization" KeyboardNavigation="false" />
                    </div>
                    @if (ShowCalendarButtonsEffective)
                    {
                        <div class="hx-input-date-dropdown-buttons">
                            <HxButton Text="@StringLocalizerFactory.GetLocalizedValue("Clear", typeof(HxInputDate))" Color="ThemeColor.Link" Size="ButtonSize.Small" OnClick="HandleClearClickAsync" tabindex="-1" />
                            <HxButton Text="@StringLocalizerFactory.GetLocalizedValue("OK", typeof(HxInputDate))" Color="ThemeColor.Primary" Size="ButtonSize.Small" OnClick="HandleOKClickAsync" tabindex="-1"  />
                        </div>
                    }
                </HxDropdownContent>
            }

            @if (RenderIcon)
            {
                <div @ref="iconWrapperElement" class="hx-input-date-icon">
                    <HxIcon Icon="CalendarIconEffective" />
                </div>
            }

            @if (RenderPredefinedDates)
            {
                <button class="btn btn-light" type="button" data-bs-toggle="dropdown" disabled="@(!EnabledEffective)" tabindex="-1">
                    <HxIcon Icon="@BootstrapIcon.ThreeDotsVertical" />
                </button>
                @if (EnabledEffective)
                {
                    <ul class="dropdown-menu dropdown-menu-end">
                        @foreach (var item in PredefinedDatesEffective)
                        {
                            <li><span class="dropdown-item" role="button" @onclick="() => HandleCustomDateClick(item.Date)" @onclick:stopPropagation>@StringLocalizerFactory.GetLocalizedValue(item.Label, item.ResourceType)</span></li>
                        }
                    </ul>
                }
            }

        </HxDropdown>
    </div>

}