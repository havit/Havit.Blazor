@namespace Havit.Blazor.Components.Web.Bootstrap
@typeparam TItem
@using Havit.Blazor.Components.Web.Bootstrap.Internal

<div class="@CssClassHelper.Combine("hx-search-box", CssClassEffective)">
	@if (!string.IsNullOrEmpty(Label) && (LabelTypeEffective == Bootstrap.LabelType.Regular))
	{
		<label class="form-label">@Label</label>
	}

	<div class="@CssClassHelper.Combine(HasInputGroups ? "input-group" : null,
										HasInputGroupEnd ? "input-group-end" : null,
 										HasInputGroupStart ? "input-group-start" : null)">
		@if (InputGroupStartText is not null)
		{
			<span class="input-group-text">@InputGroupStartText</span>
		}

		@InputGroupStartTemplate
		<HxDropdown AutoClose="DropdownAutoClose.Outside">
			<HxDropdownToggleElement @ref="_dropdownToggle"
									 ElementName="div"
									 CssClass="@CssClassHelper.Combine(
													"position-relative",
													(LabelTypeEffective == Bootstrap.LabelType.Floating) ? "form-floating" : null,
													InputSizeEffective.AsInputGroupCssClass(),
													(_initialized || DefaultContentTemplate is not null ? null : "disabled"))"
									 DropdownOffset="@DropdownOffset"
									 OnShown="HandleDropdownMenuShown"
									 OnHidden="HandleDropdownMenuHidden"
									 OnHiding="OnHiding"
									 id="@_dropdownToggleElementId">


				@if ((SearchIconEffective is not null) && (SearchIconPlacementEffective == SearchBoxSearchIconPlacement.Start))
				{
					<div class="hx-search-box-input-icon hx-search-box-input-icon-start">
						<HxIcon CssClass="hx-search-box-input-icon-search" Icon="SearchIconEffective" />
					</div>
				}

				<input @ref="_inputElementReference"
					   id="@_inputId"
					   value="@TextQuery"
					   @oninput="(eventArgs) => HandleTextQueryValueChanged(eventArgs.Value.ToString())"
					   @onfocus="HandleInputFocus"
					   @onblur="HandleInputBlur"
					   inputmode="search"
					   disabled="@(!Enabled)"
                       spellcheck="@SpellcheckEffective?.ToString().ToLower()"
					   placeholder="@(LabelTypeEffective == Bootstrap.LabelType.Floating ? "placeholder" : Placeholder)"
					   class="@CssClassHelper.Combine(
									"form-control",
									((IInputWithSize)this).GetInputSizeCssClass(),
									(!HasInputGroupEnd && HasInputGroups ? "hx-search-box-input-with-search-icon" : null),
									InputCssClassEffective)" />

				@if (!string.IsNullOrEmpty(Label) && (LabelTypeEffective == Bootstrap.LabelType.Floating))
				{
					<label for="@_inputId">@Label</label>
				}

				@if (_dataProviderInProgress)
				{
					<div class="hx-search-box-input-icon hx-search-box-input-icon-end">
                        <HxSpinner Size="SpinnerSize.Small" Type="SpinnerType.Border" />
					</div>
				}
				else if (!string.IsNullOrEmpty(TextQuery) && (ClearIconEffective is not null) && (Enabled == true))
				{
					<div role="button" class="hx-search-box-input-icon hx-search-box-input-icon-end" @onclick="ClearInputAsync">
						<HxIcon CssClass="hx-search-box-input-icon-clear" Icon="ClearIconEffective" />
					</div>
				}
				else if ((SearchIconEffective is not null) && (SearchIconPlacementEffective == SearchBoxSearchIconPlacement.End))
				{
					// Pointer events are disabled when the search is disabled to prevent triggering the dropdown
					<div class="@CssClassHelper.Combine("hx-search-box-input-icon hx-search-box-input-icon-end", Enabled == false ? "pe-none" : null)">
						<HxIcon CssClass="hx-search-box-input-icon-search" Icon="SearchIconEffective" />
					</div>
				}
			</HxDropdownToggleElement>

			<HxDropdownMenu>
				@if ((_searchResults.Count > 0) && ((TextQuery?.Length ?? 0) >= MinimumLengthEffective))
				{
					@for (int i = 0; i < _searchResults.Count; i++)
					{
						var item = _searchResults[i];

						string title = ItemTitleSelector?.Invoke(item) ?? null;
						string subtitle = ItemSubtitleSelector?.Invoke(item) ?? null;
						IconBase icon = ItemIconSelector?.Invoke(item) ?? null;

						<li class="overflow-hidden">
							<button type="button"
									tabindex="-1"
									class="@CssClassHelper.Combine("dropdown-item", _focusedItemIndex == i ? "hx-dropdown-item-focused" : null, ItemCssClassEffective)"
									@onclick="() => HandleItemSelected(item)">

								@if (ItemTemplate is null)
								{
									<HxSearchBoxItemInternal Title="@title" Subtitle="@subtitle" Icon="@icon" />
								}
								else
								{
									@ItemTemplate(item)
								}
							</button>
						</li>
					}
				}
				else if ((TextQuery is not null) && ((TextQuery?.Length ?? 0) >= MinimumLengthEffective))
				{
					@NotFoundTemplate
				}
				else
				{
					@DefaultContentTemplate
				}

				@if (AllowTextQuery && (TextQuery is not null) && (TextQuery.Length >= MinimumLengthEffective))
				{
					<li class="overflow-hidden">
						<button type="button"
								tabindex="-1"
								class="@CssClassHelper.Combine("dropdown-item", HasFreeTextItemFocus() ? "hx-dropdown-item-focused" : null, ItemCssClassEffective)"
								@onclick="HandleTextQueryTriggered">

							@if (TextQueryItemTemplate is null)
							{
								<HxSearchBoxItemInternal Title="@TextQuery" Icon="@SearchIconEffective" />
							}
							else
							{
								@TextQueryItemTemplate(TextQuery)
							}
						</button>
					</li>
				}
			</HxDropdownMenu>
		</HxDropdown>

		@InputGroupEndTemplate

		@if (InputGroupEndText is not null)
		{
			<span class="input-group-text">@InputGroupEndText</span>
		}
	</div>
</div>
