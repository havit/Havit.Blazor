@namespace Havit.Blazor.Components.Web.Bootstrap
@using Havit.Blazor.Components.Web.Bootstrap.Internal
@typeparam TItem

<div id="@dropdownId" class="@CssClassEffective">
    <HxDropdown AutoClose="DropdownAutoClose.Outside" >
		<HxDropdownToggleElement
			@ref="dropdownToggle"
			ElementName="div"
			CssClass="@(initialized || DefaultContentTemplate is not null ? null : "disabled")"
			DropdownReference="@("#" + dropdownId)"
			DropdownOffset="@DropdownOffset"
			OnShown="OnDropdownMenuShown"
			OnHidden="() => dropdownMenuActive = false"
			id="@dropdownToggleElementId">

			<div class="position-relative">
				<form @onsubmit="HandleTextQueryTriggered" @onfocusout="HandleInputBlur">
					<HxInputText
						Value="@TextQuery"
                        ValueChanged="HandleTextQueryValueChanged"
                        ValueExpression="() => this.TextQuery"
						InputMode="InputMode.Search"
						BindEvent="BindEvent.OnInput"
						Enabled="Enabled"
						Placeholder="@Placeholder"
						Label="@Label"
						LabelType="LabelType"
						InputSize="this.InputSizeEffective"
						CssClass="InputCssClass"
						InputGroupStartText="@InputGroupStartText"
						InputGroupEndText="@InputGroupEndText"
						InputGroupStartTemplate="@InputGroupStartTemplate"
						InputGroupEndTemplate="@InputGroupEndTemplate" />

                    @if (InputGroupEndText is null && InputGroupEndTemplate is null)
					{
                        if (dataProviderInProgress)
						{
							<div class="hx-search-box-input-icon hx-search-box-input-icon-end">
								<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
							</div>
						}
						else if (!string.IsNullOrEmpty(TextQuery) && (ClearIconEffective is not null))
						{
							<div role="button" class="hx-search-box-input-icon hx-search-box-input-icon-end" @onclick="ClearInputAsync">
								<HxIcon Icon="ClearIconEffective" />
							</div>
						}
						else if (SearchIconEffective is not null)
						{
							<div class="hx-search-box-input-icon hx-search-box-input-icon-end">
								<HxIcon Icon="SearchIconEffective" />
							</div>
						}
					}
				</form>
			</div>
		</HxDropdownToggleElement>

		<HxDropdownMenu>
			@if ((searchResults.Count > 0) && (TextQuery.Length >= MinimumLengthEffective))
			{
				@foreach (var item in searchResults)
				{
					string title = ItemTitleSelector?.Invoke(item) ?? null;
					string subtitle = ItemSubtitleSelector?.Invoke(item) ?? null;
					IconBase icon = ItemIconSelector?.Invoke(item) ?? null;

					<li class="overflow-hidden" @onkeypress="(eventArgs) => HandleKeyPress(eventArgs, async () => await HandleItemSelected(item))">
						<a tabindex="0" role="button" class="@CssClassHelper.Combine("dropdown-item", ItemCssClassEffective)" @onclick="() => HandleItemSelected(item)">
							@if (ItemTemplate is null)
							{
								<HxSearchBoxItem Title="@title" Subtitle="@subtitle" Icon="@icon" />
							}
							else
							{
								@ItemTemplate(item)
							}
						</a>
					</li>
				}
			}
			else if ((TextQuery is not null) && (TextQuery.Length >= MinimumLengthEffective))
			{
				@NotFoundTemplate
			}
			else
			{
				@DefaultContentTemplate
			}

			@if (AllowTextQuery && (TextQuery is not null) && (TextQuery.Length >= MinimumLengthEffective))
			{
				<li class="overflow-hidden" @onkeypress="(eventArgs) => HandleKeyPress(eventArgs, async () => await HandleTextQueryTriggered())">
					<a tabindex="0" role="button" class="@CssClassHelper.Combine("dropdown-item", ItemCssClassEffective)" @onclick="HandleTextQueryTriggered">
						@if (TextQueryItemTemplate is null)
						{
							<HxSearchBoxItem Title="@TextQuery" Icon="@SearchIconEffective" />
						}
						else
						{
							@TextQueryItemTemplate(TextQuery)
						}
					</a>
				</li>
			}
		</HxDropdownMenu>
	</HxDropdown>
</div>
