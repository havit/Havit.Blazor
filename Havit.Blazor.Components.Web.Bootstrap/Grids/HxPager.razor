@namespace Havit.Blazor.Components.Web.Bootstrap
@{
	int numericButtonsCountEffective = NumericButtonsCountEffective;
	int pageFromInclusive = ((this.CurrentPageIndex / numericButtonsCountEffective) * numericButtonsCountEffective);
	int pageToExclusive = Math.Min(TotalPages, pageFromInclusive + numericButtonsCountEffective);
	bool showFirstLast = true; // always
	bool showPreviousNext = true; // always

	string previousPageItemDisabledCssClass = CssClassHelper.Combine("page-item", (CurrentPageIndex == 0) ? "disabled" : null);
	string nextPageItemDisabledCssClass = CssClassHelper.Combine("page-item", (CurrentPageIndex == TotalPages - 1) ? "disabled" : null);
}

<ul role="button" class="@CssClassHelper.Combine("hx-pager pagination", this.CssClass)">

	@if (showFirstLast)
	{
		<li class="@previousPageItemDisabledCssClass">
			<a class="page-link" @onclick="async () => await SetCurrentPageIndexTo(0)" @onclick:stopPropagation>
				<HxIcon Icon="@FirstPageIconEffective" />
			</a>
		</li>
	}

	@if (showPreviousNext)
	{
		<li class="@previousPageItemDisabledCssClass">
			<a class="page-link" @onclick="async () => await SetCurrentPageIndexTo(CurrentPageIndex - 1)" @onclick:stopPropagation>
				<HxIcon Icon="@PreviousPageIconEffective" />
			</a>
		</li>
	}

	@if (pageFromInclusive > 0)
	{
		<li class="page-item d-none d-md-block"><a class="page-link" @onclick="async () => await SetCurrentPageIndexTo(pageFromInclusive - 1)" @onclick:stopPropagation>...</a></li>
	}

	@for (int i = pageFromInclusive; i < pageToExclusive; i++)
	{
		int j = i;
		if (i == CurrentPageIndex)
		{
			<li class="page-item active">
				<a class="page-link">@((j + 1).ToString())</a>
			</li>
		}
		else
		{
			<li class="page-item d-none d-md-block"><a class="page-link" @onclick="async () => await SetCurrentPageIndexTo(j)" @onclick:stopPropagation>@((j + 1).ToString("N0"))</a></li>
		}
	}

	@if (pageToExclusive < (this.TotalPages - 1))
	{
		<li class="page-item d-none d-md-block"><a class="page-link" @onclick="async () => await SetCurrentPageIndexTo(pageToExclusive)" @onclick:stopPropagation>...</a></li>
	}

	@if (showPreviousNext)
	{
		<li class="@nextPageItemDisabledCssClass">
			<a class="page-link" @onclick="async () => await SetCurrentPageIndexTo(CurrentPageIndex + 1)" @onclick:stopPropagation>
				<HxIcon Icon="@NextPageIconEffective" />
			</a>
		</li>
	}

	@if (showFirstLast)
	{
		<li class="@nextPageItemDisabledCssClass">
			<a class="page-link" @onclick="async () => await SetCurrentPageIndexTo(TotalPages - 1)" @onclick:stopPropagation>
				<HxIcon Icon="@LastPageIconEffective" />
			</a>
		</li>
	}
</ul>
