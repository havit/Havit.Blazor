@namespace Havit.Blazor.Components.Web.Bootstrap
@using Havit.Blazor.Components.Web.Bootstrap.Internal
@typeparam TItem

<CascadingValue Value="@columnsListRegistration" Name="@ColumnsRegistrationCascadingValueName" IsFixed="true">
	@* To get the components to the collections, we have to let them render with this component. Still we don't want them to render any output. *@
	@if (MultiSelectionEnabled)
	{
		bool allDataItemsSelected = (paginationDataItemsToRender != null) && (SelectedDataItems != null) && (SelectedDataItems.Count > 0) && (paginationDataItemsToRender.Count == SelectedDataItems.Count);
		<HxMultiSelectGridColumnInternal TItem="TItem"
							   AllDataItemsSelected="@allDataItemsSelected"
							   SelectedDataItems="@SelectedDataItems"
							   OnSelectDataItemClicked="HandleMultiSelectSelectDataItemClicked"
							   OnUnselectDataItemClicked="HandleMultiSelectUnselectDataItemClicked"
							   OnSelectAllClicked="HandleMultiSelectSelectAllClicked"
							   OnSelectNoneClicked="HandleMultiSelectSelectNoneClicked" />
	}
	@Columns
	@if (ContextMenu != null)
	{
		<HxContextMenuGridColumn TItem="TItem" ChildContent="ContextMenu" Order="Int32.MaxValue" />
	}
</CascadingValue>

@{
	List<IHxGridColumn<TItem>> columnsToRender = GetColumnsToRender();

	bool shouldRenderLoadingData = totalCount == null;
	bool shouldRenderLoadingDataWithLoadingTemplate = shouldRenderLoadingData && (LoadingDataTemplate != null);
	bool shouldRenderLoadingDataWithPlaceholders = shouldRenderLoadingData && !shouldRenderLoadingDataWithLoadingTemplate && (PlaceholdersRowCountEffective > 0);

	bool shouldRenderEmptyData = totalCount == 0;
	bool shouldRenderData;
	bool shouldRenderFooter = (totalCount > 0) || ((totalCount == 0) && this.ShowFooterWhenEmptyDataEffective);
	var rowHeightValue = ItemRowHeightEffective;
	string rowHeight = rowHeightValue.ToString() + "px";

	switch (ContentNavigationModeEffective)
	{
		case GridContentNavigationMode.Pagination:
			shouldRenderData = (totalCount > 0);
			break;

		case GridContentNavigationMode.InfiniteScroll:
			shouldRenderData = (totalCount == null) || (totalCount > 0); // null: we need to render Virtualize even when we have no data yet - Virtalize ensures data load
			break;

		default: throw new InvalidOperationException(ContentNavigationModeEffective.ToString());
	}

	if ((paginationDataItemsToRender?.Count == 0) && (CurrentUserState.PageIndex > 0))
	{
		paginationDecreasePageIndexAfterRender = true;
	}
}

@if (columnsToRender.Any() && (shouldRenderLoadingData || shouldRenderEmptyData || shouldRenderData))
{
	<HxProgressIndicator InProgress="@(InProgress ?? (dataProviderInProgress /* indicates data loading */ && !shouldRenderLoadingDataWithPlaceholders /* but not when placeholders are used - in such case we are indicating data loading using the placeholders */))">

		<div class="@CssClassHelper.Combine(ResponsiveEffective ? "table-responsive" : null, TableContainerCssClassEffective)">
			<table class="@GetTableElementCssClass(shouldRenderData)">
				<thead>
					<tr class="@HeaderRowCssClassEffective">
						@{
							GridHeaderCellContext gridHeaderCellContext = CreateGridHeaderCellContext();

							@foreach (IHxGridColumn<TItem> column in columnsToRender)
							{
								var columnSorting = column.GetSorting();
								bool isCurrentSorting = CurrentUserState.Sorting?.StartsWith(columnSorting) ?? false;
								var headerCellTemplate = column.GetHeaderCellTemplate(gridHeaderCellContext);
								@if (columnSorting.Any())
								{
									<th @onclick="async () => await HandleSortingClick(columnSorting)" @onclick:stopPropagation role="button" class="@CssClassHelper.Combine(headerCellTemplate.CssClass, isCurrentSorting ? "hx-grid-sorted" : "hx-grid-sortable")">
										<div class="hx-grid-header-cell-container">
											<div class="hx-grid-header-cell-template">@headerCellTemplate.Template</div>
											@if ((!isCurrentSorting && (columnSorting[0].SortDirection == Collections.SortDirection.Descending))
										|| (isCurrentSorting && (CurrentUserState.Sorting[0].SortDirection == Collections.SortDirection.Descending)))
											{
												<HxIcon Icon="@this.GetDefaults().SortDescendingIcon" />
											}
											else
											{
												<HxIcon Icon="@this.GetDefaults().SortAscendingIcon" />
											}
										</div>
									</th>
								}
								else
								{
									<th class="@headerCellTemplate.CssClass">
										@headerCellTemplate.Template
									</th>
								}
							}
						}
					</tr>
				</thead>
				<tbody>
					@if (shouldRenderLoadingData)
					{
						@if (shouldRenderLoadingDataWithPlaceholders)
						{
							int rowsToRender = PlaceholdersRowCountEffective;
							int pageOffset = CurrentUserState.PageIndex * PageSizeEffective;

							for (int i = 0; i < rowsToRender; i++)
							{
								GridPlaceholderCellContext placeholderContext = new GridPlaceholderCellContext { Index = pageOffset + i };
								<tr>
									@foreach (IHxGridColumn<TItem> column in columnsToRender)
									{
										GridCellTemplate placeholderCellTemplate = column.GetItemPlaceholderCellTemplate(placeholderContext);
										<td class="@placeholderCellTemplate.CssClass">
											@placeholderCellTemplate.Template
										</td>
									}
								</tr>
							}
						}
						else
						{
							<tr>
								<td colspan="@columnsToRender.Count">
									@if (shouldRenderLoadingDataWithLoadingTemplate)
									{
										@LoadingDataTemplate
									}
									else
									{
										<div class="text-center text-secondary my-5">
											<div class="fs-3"><HxIcon Icon="@BootstrapIcon.InboxFill" /></div>
											<div>@HxGridLocalizer["LoadingData"]</div>
										</div>
									}
								</td>
							</tr>
						}
					}
					@if (shouldRenderEmptyData)
					{
						<tr>
							<td colspan="@columnsToRender.Count">

								@if (EmptyDataTemplate != null)
								{
                                    @EmptyDataTemplate
                                }
                                else
                                {
                                    <HxGridEmptyDataTemplateDefaultContent />
                                }

							</td>
						</tr>
					}
					@if (shouldRenderData)
					{

						RenderFragment<TItem> rowTemplate = (TItem item) =>@<text>
					        @if (SelectionEnabled || MultiSelectionEnabled)
					        {
						        <tr role="button"
							        height="@((this.ContentNavigationModeEffective == GridContentNavigationMode.InfiniteScroll) ? rowHeight : null)"
							        class="@CssClassHelper.Combine(
													        ItemRowCssClassEffective,
													        ItemRowCssClassSelector?.Invoke(item),
													        ((SelectionEnabled && (item != null) && item.Equals(SelectedDataItem)) ? "table-active" : null))"
							        @onclick="async () => await HandleSelectOrMultiSelectDataItemClick(item)"
							        @onclick:stopPropagation>

							        @foreach (IHxGridColumn<TItem> column in columnsToRender)
							        {
								        // same as below in the else section
								        GridCellTemplate cellTemplate = column.GetItemCellTemplate(item);
								        <td class="@cellTemplate.CssClass">
									        @cellTemplate.Template
								        </td>
							        }
						        </tr>
					        }
					        else
					        {
						        // !SelectionEnabled && !MultiSelectionEnabled - no table-active, no event handlers
						        <tr height="@((this.ContentNavigationModeEffective == GridContentNavigationMode.InfiniteScroll) ? rowHeight : null)"
							        class="@CssClassHelper.Combine(ItemRowCssClassEffective, ItemRowCssClassSelector?.Invoke(item))"
							        @onclick:stopPropagation>
							        @foreach (IHxGridColumn<TItem> column in columnsToRender)
							        {
								        // same as above this else section
								        GridCellTemplate cellTemplate = column.GetItemCellTemplate(item);
								        <td class="@cellTemplate.CssClass">
									        @cellTemplate.Template
								        </td>
							        }
						        </tr>
					        }
						</text>;

				        @if (ContentNavigationModeEffective == GridContentNavigationMode.InfiniteScroll)
				        {
					        <Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize TItem="TItem" @ref="infiniteScrollVirtualizeComponent" ItemsProvider="VirtualizeItemsProvider" ItemSize="@ItemRowHeightEffective" OverscanCount="@OverscanCountEffective">
						        <ItemContent>
							        @rowTemplate(@context)
						        </ItemContent>
						        <Placeholder Context="placeholderContext">
							        <tr height="@rowHeight">
								        @foreach (IHxGridColumn<TItem> column in columnsToRender)
								        {
									        GridCellTemplate placeholderCellTemplate = column.GetItemPlaceholderCellTemplate(new GridPlaceholderCellContext { Index = placeholderContext.Index });
									        <td class="@placeholderCellTemplate.CssClass">
										        @placeholderCellTemplate.Template
									        </td>
								        }
							        </tr>
						        </Placeholder>
					        </Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize>
				        }

				        @if (ContentNavigationModeEffective == GridContentNavigationMode.Pagination)
				        {
					        foreach (TItem item in paginationDataItemsToRender)
					        {
						        @rowTemplate(item)
					        }
				        }
			        }
				</tbody>
				@{
					GridFooterCellContext gridFooterCellContext = CreateGridFooterCellContext();
					GridCellTemplate[] footerTemplates = columnsToRender.Select(column => column.GetFooterCellTemplate(gridFooterCellContext)).ToArray();
					if (footerTemplates.Any(cellTemplate => cellTemplate.Template != null) // there must be a tempate
						&& shouldRenderFooter)
					{
						<tfoot>
							<tr class="@FooterRowCssClassEffective">
								@foreach (GridCellTemplate footerCellTemplate in footerTemplates)
								{
									<td class="@footerCellTemplate.CssClass">@footerCellTemplate.Template</td>
								}
							</tr>
						</tfoot>
					}
				}
			</table>
		</div>

		@if ((ContentNavigationModeEffective == GridContentNavigationMode.Pagination) && (PageSizeEffective > 0) && (totalCount != null))
		{
			int totalPages = (totalCount.Value + PageSizeEffective - 1) / PageSizeEffective;
			if (totalPages > 1)
			{
				<HxPager TotalPages="@totalPages"
						 CurrentPageIndex="@CurrentUserState.PageIndex"
						 CurrentPageIndexChanged="@HandlePagerCurrentPageIndexChanged"
                         CssClass="@PagerCssClassEffective"
						 Settings="@PagerSettingsEffective"
						 />
			}
		}

	</HxProgressIndicator>
}
